# Minimum CMake required
cmake_minimum_required(VERSION 3.1)

# Project
project(onnx C CXX)

# Set C++11 as standard for the whole project
set(CMAKE_CXX_STANDARD 11)

set(ONNX_ROOT ${PROJECT_SOURCE_DIR})

set(CMAKE_MODULE_PATH "")
list(APPEND CMAKE_MODULE_PATH ${ONNX_ROOT}/cmake/Modules)

# Customized version of find Protobuf. We need to avoid situations mentioned
# in https://github.com/caffe2/caffe2/blob/b7d983f255ef5496474f1ea188edb5e0ac442761/cmake/ProtoBuf.cmake#L82-L92
# The following section is stolen from cmake/ProtoBuf.cmake in Caffe2
find_program(PROTOBUF_PROTOC_EXECUTABLE
  NAMES protoc
  DOC "The Google Protocol Buffers Compiler")

# Only if protoc was found, seed the include directories and libraries.
# We assume that protoc is installed at PREFIX/bin.
# We use get_filename_component to resolve PREFIX.
if(PROTOBUF_PROTOC_EXECUTABLE)
  get_filename_component(
    _PROTOBUF_INSTALL_PREFIX
    ${PROTOBUF_PROTOC_EXECUTABLE}
    DIRECTORY)
  get_filename_component(
    _PROTOBUF_INSTALL_PREFIX
    ${_PROTOBUF_INSTALL_PREFIX}/..
    REALPATH)
  find_library(PROTOBUF_LIBRARY
    NAMES protobuf
    PATHS ${_PROTOBUF_INSTALL_PREFIX}/lib
    NO_DEFAULT_PATH)
  find_library(PROTOBUF_PROTOC_LIBRARY
    NAMES protoc
    PATHS ${_PROTOBUF_INSTALL_PREFIX}/lib
    NO_DEFAULT_PATH)
  find_library(PROTOBUF_LITE_LIBRARY
    NAMES protobuf-lite
    PATHS ${_PROTOBUF_INSTALL_PREFIX}/lib
    NO_DEFAULT_PATH)
  find_path(PROTOBUF_INCLUDE_DIR
    google/protobuf/service.h
    PATHS ${_PROTOBUF_INSTALL_PREFIX}/include
    NO_DEFAULT_PATH)
  find_package(Protobuf REQUIRED)
endif()

# Build the libraries with -fPIC
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

if(ONNX_NAMESPACE)
  SET(MY_ONNX_NAMESPACE "-DONNX_NAMESPACE=${ONNX_NAMESPACE}")
else()
  SET(ONNX_NAMESPACE "onnx")
  SET(MY_ONNX_NAMESPACE "-DONNX_NAMESPACE=onnx")
endif()
add_definitions(${MY_ONNX_NAMESPACE})

# Python command
if ("${PYTHON_EXECUTABLE}" STREQUAL "")
  set(PYTHON_EXE "python")
else()
  set(PYTHON_EXE "${PYTHON_EXECUTABLE}")
endif()

# function(RELATIVE_PROTOBUF_GENERATE_CPP SRCS HDRS ROOT_DIR)
# from https://github.com/tensorflow/tensorflow/blob/d2c3b873c6f8ff999a2e4ee707a84ff00d9c15a5/tensorflow/contrib/cmake/tf_core_framework.cmake
# to solve the problem that customized dir can't be specified when calling PROTOBUF_GENERATE_CPP.
function(RELATIVE_PROTOBUF_GENERATE_CPP SRCS HDRS ROOT_DIR)
  if(NOT ARGN)
    message(SEND_ERROR "Error: RELATIVE_PROTOBUF_GENERATE_CPP() called without any proto files")
    return()
  endif()

  if(MSVC)
    set(DLLEXPORT_STR "dllexport_decl=ONNX_API:")
  else()
    set(DLLEXPORT_STR "")
  endif()

  set(${SRCS})
  set(${HDRS})

  set(GEN_PROTO_PY ${ROOT_DIR}/onnx/gen_proto.py)
  foreach(INFILE ${ARGN})
    set(ABS_FILE ${ROOT_DIR}/${INFILE})
    get_filename_component(FILE_DIR ${ABS_FILE} DIRECTORY)
    get_filename_component(FILE_WE ${INFILE} NAME_WE)
    file(RELATIVE_PATH REL_DIR ${ROOT_DIR} ${FILE_DIR})
    set(OUTPUT_PROTO_DIR "${CMAKE_CURRENT_BINARY_DIR}/${REL_DIR}")

    if(ONNX_NAMESPACE STREQUAL "onnx")
      set(OUTPUT_PB_HEADER "${OUTPUT_PROTO_DIR}/${FILE_WE}.pb.h")
      set(OUTPUT_PB_SRC "${OUTPUT_PROTO_DIR}/${FILE_WE}.pb.cc")
      set(GENERATED_PROTO "${OUTPUT_PROTO_DIR}/${FILE_WE}.proto")
    else()
      set(OUTPUT_PB_HEADER "${OUTPUT_PROTO_DIR}/${FILE_WE}_${ONNX_NAMESPACE}.pb.h")
      set(OUTPUT_PB_SRC "${OUTPUT_PROTO_DIR}/${FILE_WE}_${ONNX_NAMESPACE}.pb.cc")
      # We need this dummy header generated by gen_proto.py when ONNX_NAMESPACE
      # is not onnx
      list(APPEND ${HDRS} "${OUTPUT_PROTO_DIR}/${FILE_WE}.pb.h")
      set(GENERATED_PROTO "${OUTPUT_PROTO_DIR}/${FILE_WE}_${ONNX_NAMESPACE}.proto")
    endif()
    list(APPEND ${SRCS} "${OUTPUT_PB_SRC}")
    list(APPEND ${HDRS} "${OUTPUT_PB_HEADER}")

    add_custom_command(
      OUTPUT "${GENERATED_PROTO}"
      COMMAND mkdir
      ARGS -p ${OUTPUT_PROTO_DIR}
      COMMAND ${PYTHON_EXE} ${GEN_PROTO_PY}
      ARGS -p ${ONNX_NAMESPACE} -o ${OUTPUT_PROTO_DIR} ${FILE_WE}
      DEPENDS ${INFILE}
      COMMENT "Running gen_proto.py on ${INFILE}"
      VERBATIM )

    add_custom_command (
      OUTPUT "${OUTPUT_PB_SRC}"
             "${OUTPUT_PB_HEADER}"
      COMMAND ${PROTOBUF_PROTOC_EXECUTABLE}
      ARGS --cpp_out ${DLLEXPORT_STR}${OUTPUT_PROTO_DIR} ${GENERATED_PROTO} -I ${PROTOBUF_INCLUDE_DIRS} -I ${OUTPUT_PROTO_DIR}
      DEPENDS ${GENERATED_PROTO}
      COMMENT "Running C++ protocol buffer compiler on ${GENERATED_PROTO}"
      VERBATIM )
  endforeach()

  set_source_files_properties(${${SRCS}} ${${HDRS}} PROPERTIES GENERATED TRUE)
  set(${SRCS} ${${SRCS}} PARENT_SCOPE)
  set(${HDRS} ${${HDRS}} PARENT_SCOPE)
endfunction()

RELATIVE_PROTOBUF_GENERATE_CPP(PROTO_SRCS PROTO_HDRS ${ONNX_ROOT}
    onnx/onnx.in.proto
)

# Temp solution to remove files generated by calling 'pip install ..."
# Should be removed after changing setup.py to use cmake to build c++ part.
file(REMOVE
    "${ONNX_ROOT}/onnx/onnx.pb.h"
    "${ONNX_ROOT}/onnx/onnx.pb.cc"
    "${ONNX_ROOT}/onnx/onnx-operators.pb.h"
    "${ONNX_ROOT}/onnx/onnx-operators.pb.cc"
)

file(GLOB_RECURSE onnx_src
    "${ONNX_ROOT}/onnx/*.h"
    "${ONNX_ROOT}/onnx/*.cc"
)
list(REMOVE_ITEM onnx_src "${ONNX_ROOT}/onnx/cpp2py_export.cc")

if(MSVC)
    set(DLLEXPORT_OPTION "-DONNX_API=__declspec(dllexport)")
else()
    set(DLLEXPORT_OPTION "-DONNX_API=")
endif()

add_library(onnx_proto ${PROTO_SRCS} ${PROTO_HDRS})
target_include_directories(onnx_proto PUBLIC "${CMAKE_CURRENT_BINARY_DIR}" "${PROTOBUF_INCLUDE_DIRS}")
target_link_libraries(onnx_proto PUBLIC ${PROTOBUF_LIBRARIES})

if(MSVC)
    target_compile_options(onnx_proto PRIVATE /WX- ${DLLEXPORT_OPTION})
endif()

add_library(onnx ${onnx_src})
target_include_directories(onnx PUBLIC ${ONNX_ROOT} "${CMAKE_CURRENT_BINARY_DIR}")
target_link_libraries(onnx PUBLIC onnx_proto)

add_library(onnx_pybind MODULE "${ONNX_ROOT}/onnx/cpp2py_export.cc")
target_include_directories(onnx_pybind PRIVATE "${CMAKE_CURRENT_BINARY_DIR}" "${PROTOBUF_INCLUDE_DIRS}" "${PYTHON_INCLUDE_DIR}")

# pybind11 is a header only lib
find_package(pybind11)
if(pybind11_FOUND)
  target_include_directories(onnx_pybind PRIVATE ${pybind11_INCLUDE_DIRS})
else()
  target_include_directories(onnx_pybind PRIVATE ${ONNX_ROOT}/third_party/pybind11/include)
endif()
target_link_libraries(onnx_pybind PRIVATE onnx_proto onnx)

# Export include directories
set(ONNX_INCLUDE_DIRS "${ONNX_ROOT}" "${CMAKE_CURRENT_BINARY_DIR}")
set(ONNX_INCLUDE_DIRS ${ONNX_INCLUDE_DIRS} PARENT_SCOPE)

if (WIN32)
    target_compile_options(onnx_proto PRIVATE
        /MP
        /MX
    )
    target_compile_options(onnx PRIVATE
        /MP
        /MX
        /wd4800 # disable warning type' : forcing value to bool 'true' or 'false' (performance warning)
        /wd4503 # identifier' : decorated name length exceeded, name was truncated
    )
    target_compile_options(onnx_pybind PRIVATE
        /MP
        /MX
        /wd4800 # disable warning type' : forcing value to bool 'true' or 'false' (performance warning)
        /wd4503 # identifier' : decorated name length exceeded, name was truncated
    )
    set(onnx_static_library_flags
        -IGNORE:4221 # LNK4221: This object file does not define any previously undefined public symbols, so it will not be used by any link operation that consumes this library
    )
    set_target_properties(onnx PROPERTIES
        STATIC_LIBRARY_FLAGS "${onnx_static_library_flags}")
endif()
if(APPLE)
    set_target_properties(onnx PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
endif()
