# Copyright (c) ONNX Project Contributors
#
# SPDX-License-Identifier: Apache-2.0

name: LinuxRelease

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      build_mode:
        required: true
        type: string

permissions:
  contents: read

jobs:
  build-and-test:
    if: github.event_name != 'pull_request' || startsWith( github.base_ref, 'rel-') || contains( github.event.pull_request.labels.*.name, 'run release CIs')
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13', '3.13t']
        architecture: ['x64','arm64']

    env:
      MANYLINUX_WHEEL_X64: "manylinux2014_x86_64.whl"
      MANYLINUX_WHEEL_ARM64: "manylinux2014_aarch64.whl"
      DOCKER_IMAGE_X64: "docker://quay.io/pypa/manylinux2014_x86_64:2025.03.22-2"
      DOCKER_IMAGE_ARM64: "docker://quay.io/pypa/manylinux2014_aarch64:2025.03.22-2"

    runs-on: ${{ matrix.architecture == 'x64' && 'ubuntu-24.04' || 'ubuntu-24.04-arm' }}

    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        persist-credentials: false
        submodules: true

    - name: Build wheel for x86_64
      if: matrix.architecture == 'x64'
      id: build_wheel_x86
      uses: docker://quay.io/pypa/manylinux2014_x86_64:2025.03.22-2
      with:
        entrypoint: bash
        args: .github/workflows/manylinux/entrypoint.sh ${{ matrix.python-version }} manylinux2014_x86_64 ${{ inputs.build_mode }}


    - name: Build wheel for arm64
      if: matrix.architecture == 'arm64'
      id: build_wheel_arm64
      uses: docker://quay.io/pypa/manylinux2014_aarch64:2025.03.22-2
      with:
        entrypoint: bash
        args: .github/workflows/manylinux/entrypoint.sh ${{ matrix.python-version }} manylinux2014_aarch64 ${{ inputs.build_mode }}

    - name: Set up Python ${{ matrix.python-version }}
      if: steps.build_wheel_arm64.outcome == 'success' || steps.build_wheel_x86.outcome == 'success'
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.architecture }}

    - name: Install Python dependencies
      if: steps.build_wheel_arm64.outcome == 'success' || steps.build_wheel_x86.outcome == 'success'
      run: |
        python -m pip install -q --upgrade pip
        python -m pip install -q -r requirements-release_test.txt

    - name: Install protobuf in the GitHub Action environment for testing the wheel
      if: steps.build_wheel_arm64.outcome == 'success' || steps.build_wheel_x86.outcome == 'success'
      run: |
        source workflow_scripts/protobuf/build_protobuf_unix.sh $(nproc)

    - name: Test wheel with Python ${{ matrix.python-version }}
      if: steps.build_wheel_arm64.outcome == 'success' || steps.build_wheel_x86.outcome == 'success'
      run: |
        python -m pip install dist/*${{ matrix.architecture == 'x64' && env.MANYLINUX_WHEEL_X64 || env.MANYLINUX_WHEEL_ARM64 }}

        pytest

    - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
      if: steps.build_wheel_arm64.outcome == 'success' || steps.build_wheel_x86.outcome == 'success'
      with:
        name: wheels-${{ inputs.os }}-${{ matrix.architecture }}-${{ matrix.python-version }}
        path: |
            ./dist/*.whl

    - name: TEST_HUB=1 pytest
      if: (github.event_name == 'schedule') && (steps.build_wheel_arm64.outcome == 'success' || steps.build_wheel_x86.outcome == 'success') # Only triggered by weekly event
      run: |
        TEST_HUB=1 pytest

    - name: Verify ONNX with the latest numpy
      if: steps.build_wheel_arm64.outcome == 'success' || steps.build_wheel_x86.outcome == 'success'
      run: |
        python -m pip uninstall -y numpy onnx && python -m pip install numpy
        python -m pip install dist/*${{ matrix.architecture == 'x64' && env.MANYLINUX_WHEEL_X64 || env.MANYLINUX_WHEEL_ARM64 }}
        pytest

    - name: Verify ONNX with the latest protobuf
      if: steps.build_wheel_arm64.outcome == 'success' || steps.build_wheel_x86.outcome == 'success'
      run: |
        python -m pip uninstall -y protobuf onnx && python -m pip install protobuf
        python -m pip install dist/*${{ matrix.architecture == 'x64' && env.MANYLINUX_WHEEL_X64 || env.MANYLINUX_WHEEL_ARM64 }}
        pytest

    - name: Verify ONNX with the minimumly supported packages
      if: steps.build_wheel_arm64.outcome == 'success' || steps.build_wheel_x86.outcome == 'success'
      run: |
        python -m pip uninstall -y numpy protobuf onnx && python -m pip install -r requirements-min.txt
        python -m pip install dist/*${{ matrix.architecture == 'x64' && env.MANYLINUX_WHEEL_X64 || env.MANYLINUX_WHEEL_ARM64 }}
        pytest
