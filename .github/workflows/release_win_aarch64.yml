# Copyright (c) ONNX Project Contributors
#
# SPDX-License-Identifier: Apache-2.0

name: WindowsRelease_ARM64

on: [push, pull_request]

  #workflow_call:  # Indicates that this is a reusable workflow
    # inputs:
    #   os:
    #     required: true
    #     type: string
    #   build_mode: 
    #     required: true
    #     type: string

permissions:  # set top-level default permissions as security best practice
  contents: read

jobs:
  build:
    #if: github.event_name != 'pull_request' || startsWith( github.base_ref, 'rel-') || contains( github.event.pull_request.labels.*.name, 'currenttest')
    runs-on: windows-latest

    steps:
    - name: Checkout ONNX
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
         submodules: 'true'
         persist-credentials: false

    - name: debug1
      id: debug1
      run: |
        pwd
        Get-ChildItem -Path C:\onnx\ 
         

    - name: Set up MinGW-w64 for ARM64 cross-compilation
      run: |
        choco install mingw --version 8.1.0
        mkdir C:\cross-toolchain
        setx CROSS_COMPILE C:\mingw64\bin\arm64-unknown-linux-gnu-
    
    - name: Install dependencies
      run: |
        cd ..
        choco install cmake
        choco install git        
        python -m pip install --upgrade pip
        python -m pip install -q -r requirements-release.txt
        pip install cmake
   
    - name: Set up environment variables
      run: |
          setx CMAKE_TOOLCHAIN_FILE C:\\onnx\toolchain_win_arm64.cmake
   
    - name: Build ONNX
      run: |
        mkdir build
        cd build

        $Env:ONNX_ML=1
        $Env:CMAKE_ARGS="-DONNX_USE_PROTOBUF_SHARED_LIBS=OFF -DONNX_USE_LITE_PROTO=ON -DONNX_WERROR=ON"

        cmake -DCMAKE_TOOLCHAIN_FILE=C:\\onnx\toolchain_win_arm64.cmake -DBUILD_SHARED_LIBS=ON ..

        python -m build --wheel
        #cmake --build .
   

    # - name: Install Python dependencies
    #   run: |
    #     python -m pip install -q --upgrade pip
    #     if ('${{ matrix.architecture }}' -eq 'x86') {
    #       echo "Skip installing dependencies for reference, because they don't have prebuilt wheel on x86"
    #       sed -i '' '/-r requirements-reference.txt/d' requirements-release.txt
    #     }
    #     python -m pip install -q -r requirements-release.txt
    #     python -m pip install cmake

    # - name: Build ONNX wheel
    #   run: |
    #     $arch = 'x64'
    #     if ('${{ matrix.architecture }}' -eq 'x86') {
    #       $arch = 'Win32'
    #     }

    #     . .\workflow_scripts\protobuf\build_protobuf_win.ps1 -arch $arch

    #     echo "Install ONNX"
    #     $Env:ONNX_ML=1
    #     $Env:CMAKE_ARGS="-DONNX_USE_PROTOBUF_SHARED_LIBS=OFF -DONNX_USE_LITE_PROTO=ON -DONNX_WERROR=ON"

    #     if ( '${{ inputs.build_mode }}' -ne 'release') {
    #       echo "Build preview build whl package"
    #       (Get-Content -Path 'pyproject.toml') | ForEach-Object { $_ -replace 'name = "onnx"', 'name = "onnx-weekly"' } | Set-Content -Path 'pyproject.toml'
    #       $Env:ONNX_PREVIEW_BUILD=1
    #     }
    #     python -m build --wheel
    #     Get-ChildItem -Path dist/*.whl | foreach {python -m pip install --upgrade $_.fullname}

    # - name: Test the installed wheel
    #   run: |
    #     pytest

    # - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
    #   with:
    #     name: wheels-${{ inputs.os }}-${{ matrix.python-version }}-${{matrix.architecture}}
    #     path: ./dist

    # - name: Verify ONNX with the latest numpy
    #   if: ${{ always() }}
    #   run: |
    #     python -m pip uninstall -y numpy onnx
    #     python -m pip install numpy
    #     Get-ChildItem -Path dist/*.whl | foreach {python -m pip install --upgrade $_.fullname}
    #     pytest

    # - name: Verify ONNX with the latest protobuf
    #   if: ${{ always() }}
    #   run: |
    #     python -m pip uninstall -y protobuf onnx
    #     python -m pip install protobuf
    #     Get-ChildItem -Path dist/*.whl | foreach {python -m pip install --upgrade $_.fullname}
    #     pytest

    # - name: Verify ONNX with the minimumly supported packages
    #   if: ${{ always() }}
    #   run: |
    #     python -m pip uninstall -y protobuf numpy onnx
    #     python -m pip install -r requirements-min.txt
    #     Get-ChildItem -Path dist/*.whl | foreach {python -m pip install --upgrade $_.fullname}
    #     pytest
