# Copyright (c) ONNX Project Contributors
#
# SPDX-License-Identifier: Apache-2.0

name: CI freethreading experimental

# Note: actions/setup-python does not support 3.13t therefore 
# Quansight-Labs/setup-python@v5 is used

on:
  schedule:
    - cron: '0 0 * * *'  # every day at midnight for reporting code coverage to codecov
  push:
    branches:
      - main
  pull_request:
  merge_group:
  workflow_dispatch:

permissions:  # set top-level default permissions as security best practice
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'workflow_dispatch' }}
  cancel-in-progress: true

jobs:
  test:
    name: Test ${{ matrix.os }}, ${{ matrix.python_version }}, ${{ matrix.protobuf_type }}, debug=${{ matrix.debug_build }}, onnx_ml=${{ matrix.onnx_ml }}, doc=${{ matrix.documentation }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04, macos-latest] # windows-latest not working yet
        python_version: ['3.13t']
        include:        
          - python_version: '3.13t'
            onnx_ml: 1
            debug_build: 0
            documentation: 0
            os: 'ubuntu-24.04'
            protobuf_type: 'Internal'
          - python_version: '3.13t'
            onnx_ml: 1
            debug_build: 0
            documentation: 0
            os: 'macos-latest'
            protobuf_type: 'Internal'          

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Set up Python      
        uses: Quansight-Labs/setup-python@v5
        # uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b
        with:
          python-version: ${{ matrix.python_version }}

      - name: Show versions
        run: |
          python --version
          cmake --version

      - name: Install external protobuf - Linux
        if: matrix.protobuf_type == 'External' && startsWith(matrix.os,'ubuntu')
        run: |
          sudo apt-get install libprotobuf-dev protobuf-compiler

      - name: Install external protobuf - MacOS
        if: matrix.protobuf_type == 'External' && matrix.os == 'macos-latest'
        run: |
          source workflow_scripts/protobuf/build_protobuf_unix_freethreading.sh 3 $(pwd)/protobuf/protobuf_install

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements-dev_freethreading.txt
          python -m pip install protobuf==5.29.2
          git submodule update --init --recursive

      - name: Build and install ONNX - Linux
        if: startsWith(matrix.os,'ubuntu')
        run: |
          if [ "${{ matrix.protobuf_type }}" == "External" ]; then
            export CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DONNX_USE_PROTOBUF_SHARED_LIBS=ON"
          fi
          pip install -e ".[reference]" -v
        env:
          DEBUG: ${{ matrix.debug_build }}
          ONNX_ML: ${{ matrix.onnx_ml }}
          ONNX_BUILD_TESTS: 1
          CMAKE_ARGS: "-DONNX_WERROR=ON -DCMAKE_CXX_FLAGS='-fsanitize=undefined -fno-sanitize-recover=all '"

      - name: Build and install ONNX - MacOS
        if: matrix.os == 'macos-latest'
        run: |
          pip install -e ".[reference]" -v
        env:
          DEBUG: ${{ matrix.debug_build }}
          ONNX_ML: ${{ matrix.onnx_ml }}
          ONNX_BUILD_TESTS: 1
          CMAKE_ARGS: "-DONNX_WERROR=ON"

      - name: pip freeze
        run: |
          pip freeze

      - name: Run Python tests
        run: |
          pip install nbval
          pytest -sv --cov=onnx --cov-report=xml --cov-append --cov-branch --junitxml junit.xml -n auto --dist loadscope

      - name: Run C++ tests
        if: startsWith(matrix.os,'ubuntu') || matrix.os == 'macos-latest'
        run: |
          export LD_LIBRARY_PATH="./.setuptools-cmake-build/:$LD_LIBRARY_PATH"
          ./.setuptools-cmake-build/onnx_gtests

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@1e68e06f1dbfde0e4cefc87efeba9e4643565303
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      # Note that the test data should be generated with numpy>=2.0.
      # numpy 1.x and numpy 2.0 produce slightly different numerical values.
      - name: Test backend test data
        if: matrix.documentation == 1 && startsWith(matrix.os,'ubuntu')
        run: |
          python onnx/backend/test/cmd_tools.py generate-data --clean
          git status
          git diff --exit-code -- . ':!onnx/onnx-data.proto' ':!onnx/onnx-data.proto3' ':!*output_*.pb' ':!*input_*.pb'
          if [ $? -ne 0 ]; then
            echo "git diff for test generation returned failures. Please check updated node test files"
            exit 1
          fi
          git diff --exit-code --diff-filter=ADR -- . ':!onnx/onnx-data.proto' ':!onnx/onnx-data.proto3'
          if [ $? -ne 0 ]; then
            echo "Test generation returned failures. Please check the number of node test files (input_*.pb or output_*.pb)"
            exit 1
          fi
          pip uninstall -y pillow
          python onnx/backend/test/cmd_tools.py generate-data --clean
          git status
          git diff --exit-code -- . ':!onnx/onnx-data.proto' ':!onnx/onnx-data.proto3' ':!*output_*.pb' ':!*input_*.pb'
          if [ $? -ne 0 ]; then
            echo "git diff for test generation without pillow returned failures. Please check updated node test files"
            exit 1
          fi
