# Copyright (c) ONNX Project Contributors
#
# SPDX-License-Identifier: Apache-2.0

name: MacRelease

on:
  workflow_call:
    inputs:
      os:
        required: true
        type: string
      build_mode:
        required: true
        type: string

env:
  MACOSX_DEPLOYMENT_TARGET: "12.0"

permissions:
  contents: read

jobs:
  build:
    if: github.event_name != 'pull_request' || startsWith( github.base_ref, 'rel-') || contains( github.event.pull_request.labels.*.name, 'run release CIs')
    runs-on: macos-14
    strategy:
      matrix:
        python-version: ['3.13t', '3.12', '3.11', '3.10']
      fail-fast: true

    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
          persist-credentials: false
          submodules: true

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python dependencies
      run: |
        python -m pip install -q --upgrade pip
        python -m pip install -q -r requirements-release_build.txt

    - name: Build wheel
      id: build_wheel
      env:
        CC: "clang"
        CXX: "clang++"
        ONNX_ML: 1
        CMAKE_OSX_ARCHITECTURES: "arm64;x86_64"
        CMAKE_ARGS: "-DONNX_USE_LITE_PROTO=ON -DONNX_WERROR=ON"
      run: |
        # Install Protobuf from source
        export NUM_CORES=`sysctl -n hw.logicalcpu`
        source workflow_scripts/protobuf/build_protobuf_unix.sh $NUM_CORES $(pwd)/protobuf/protobuf_install
        if [ '${{ inputs.build_mode }}' != 'release' ]; then
          sed -i '' 's/name = "onnx"/name = "onnx-weekly"/' 'pyproject.toml'
          export ONNX_PREVIEW_BUILD=1
        fi
        python -m build --wheel

    - name: Debug Python version and artifact name
      run: |
        echo "PYTHON VERSION: ${{ matrix.python-version }}"
        if [ "${{ matrix.python-version }}" = "3.12" ]; then
          echo "Artifact name: wheels-${{ inputs.os }}-3.12-abi3"
        else
          echo "Artifact name: wheels-${{ inputs.os }}-${{ matrix.python-version }}"
        fi
    - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
      if: steps.build_wheel.outcome == 'success' && (inputs.build_mode == 'preview' || !contains(matrix.python-version, 'dev')) && (matrix.python-version == '3.12')
      with:
        name: wheels-${{ inputs.os }}-3.12-abi3
        path: dist/*.whl
    - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
      if: steps.build_wheel.outcome == 'success' && (inputs.build_mode == 'preview' || !contains(matrix.python-version, 'dev')) && (matrix.python-version != '3.12')
      with:
        name: wheels-${{ inputs.os }}-${{ matrix.python-version }}
        path: dist/*.whl

  test:
    needs: build
    runs-on: ${{ (matrix.target-architecture == 'x86_64') && 'macos-15' || 'macos-14' }}
    strategy:
      matrix:
        python-version: ['3.14-dev', '3.13t', '3.13', '3.12', '3.11', '3.10']
        target-architecture: ['x86_64', 'arm64']
      fail-fast: false

    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        persist-credentials: false

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python dependencies
      run: |
        arch -${{ matrix.target-architecture }} python -m pip install -q --upgrade pip
        arch -${{ matrix.target-architecture }} python -m pip install -q -r requirements-release_test.txt

    - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
      if: matrix.python-version == '3.12' || matrix.python-version == '3.13' || matrix.python-version == '3.14-dev'
      with:
        name: wheels-${{ inputs.os }}-3.12-abi3
        path: dist
    - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0
      if: matrix.python-version != '3.12' && matrix.python-version != '3.13' && matrix.python-version != '3.14-dev'
      with:
        name: wheels-${{ inputs.os }}-${{ matrix.python-version }}
        path: dist

    - name: Test the wheel
      run: |
        arch -${{ matrix.target-architecture }} python -m pip install --upgrade dist/*.whl
        arch -${{ matrix.target-architecture }} pytest

    - name: Verify ONNX with the latest numpy
      if: matrix.python-version != '3.14-dev'
      run: |
        arch -${{ matrix.target-architecture }} python -m pip uninstall -y numpy onnx
        arch -${{ matrix.target-architecture }} python -m pip install numpy
        arch -${{ matrix.target-architecture }} python -m pip install --upgrade dist/*.whl
        arch -${{ matrix.target-architecture }} pytest

    - name: Verify ONNX with the latest protobuf
      if: matrix.python-version != '3.14-dev'
      run: |
        arch -${{ matrix.target-architecture }} python -m pip uninstall -y protobuf onnx
        arch -${{ matrix.target-architecture }} python -m pip install protobuf
        arch -${{ matrix.target-architecture }} python -m pip install --upgrade dist/*.whl
        arch -${{ matrix.target-architecture }} pytest

    - name: Verify ONNX with the minimumly supported packages
      if: matrix.python-version != '3.14-dev'
      run: |
        arch -${{ matrix.target-architecture }} python -m pip uninstall -y numpy protobuf onnx
        arch -${{ matrix.target-architecture }} python -m pip install -r requirements-min.txt
        arch -${{ matrix.target-architecture }} python -m pip install --upgrade dist/*.whl
        arch -${{ matrix.target-architecture }} pytest
