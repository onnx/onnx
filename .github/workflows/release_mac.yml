# Copyright (c) ONNX Project Contributors
#
# SPDX-License-Identifier: Apache-2.0

name: MacRelease

on:  # Specifies the event triggering the workflow
  workflow_call:  # Indicates that this is a reusable workflow
    inputs:
      os:
        required: true
        type: string

# Use MACOSX_DEPLOYMENT_TARGET=12.0 to produce compatible wheel
env:
  MACOSX_DEPLOYMENT_TARGET: "12.0"

permissions:
  contents: read

jobs:
  build:
    if: github.event_name != 'pull_request' || startsWith( github.base_ref, 'rel-') || contains( github.event.pull_request.labels.*.name, 'run release CIs')
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
        target-architecture: ['x86_64', 'arm64']

    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - name: Checkout submodules
      shell: bash
      run: |
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python dependencies
      run: |
        python -m pip install -q --upgrade pip
        python -m pip install -q -r requirements-release.txt

    - name: Build wheel
      env:
        CC: "clang"
        CXX: "clang++"
        ONNX_ML: 1
        CMAKE_OSX_ARCHITECTURES: "arm64;x86_64"
        CMAKE_ARGS: "-DONNX_USE_LITE_PROTO=ON"
      run: |
        # Install Protobuf from source
        export NUM_CORES=`sysctl -n hw.logicalcpu`
        source workflow_scripts/protobuf/build_protobuf_unix.sh $NUM_CORES $(pwd)/protobuf/protobuf_install
        if [ '${{ github.event_name }}' == 'schedule' ] || [ '${{ github.event_name }}' == 'workflow_dispatch' ]; then
          sed -i '' 's/name = "onnx"/name = "onnx-weekly"/' 'pyproject.toml'
          export ONNX_PREVIEW_BUILD=1
        fi
        python -m build --wheel

    - name: Upload wheel artifacts
      uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882
      with:
        name: wheels-${{ inputs.os }}-${{ matrix.python-version }}-${{ matrix.target-architecture }}
        path: dist/*.whl

  test:
    needs: build
    runs-on: ${{ (matrix.target-architecture == 'x86_64') && 'macos-15' || 'macos-14' }}
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        target-architecture: ['x86_64', 'arm64']

    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Python dependencies
      run: |
        arch -${{ matrix.target-architecture }} python -m pip install -q --upgrade pip
        arch -${{ matrix.target-architecture }} python -m pip install -q -r requirements-release.txt

    - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16
      with:
        name: wheels-${{ inputs.os }}-${{ matrix.python-version }}-${{ matrix.target-architecture }}
        path: dist

    - name: Test the wheel
      run: |
        arch -${{ matrix.target-architecture }} python -m pip install --upgrade dist/*.whl
        arch -${{ matrix.target-architecture }} pytest

    - name: Verify ONNX with the latest numpy
      if: ${{ always() }}
      run: |
        arch -${{ matrix.target-architecture }} python -m pip uninstall -y numpy onnx
        arch -${{ matrix.target-architecture }} python -m pip install numpy
        arch -${{ matrix.target-architecture }} python -m pip install --upgrade dist/*.whl
        arch -${{ matrix.target-architecture }} pytest

    - name: Verify ONNX with the latest protobuf
      if: ${{ always() }}
      run: |
        arch -${{ matrix.target-architecture }} python -m pip uninstall -y protobuf onnx
        arch -${{ matrix.target-architecture }} python -m pip install protobuf
        arch -${{ matrix.target-architecture }} python -m pip install --upgrade dist/*.whl
        arch -${{ matrix.target-architecture }} pytest

    - name: Verify ONNX with the minimumly supported packages
      if: always() && (matrix.target-architecture == 'x86_64' || (matrix.python-version != '3.8' && matrix.python-version != '3.9'))
      run: |
        arch -${{ matrix.target-architecture }} python -m pip uninstall -y numpy protobuf onnx
        arch -${{ matrix.target-architecture }} python -m pip install -r requirements-min.txt
        arch -${{ matrix.target-architecture }} python -m pip install --upgrade dist/*.whl
        arch -${{ matrix.target-architecture }} pytest

    - name: Verify ONNX with ONNX Runtime PyPI package
      if: matrix.python-version != '3.12'
      run: |
        arch -${{ matrix.target-architecture }} python -m pip uninstall -y protobuf numpy
        arch -${{ matrix.target-architecture }} python -m pip install -q -r requirements-release.txt
        arch -${{ matrix.target-architecture }} python -m pip install -q onnxruntime==1.17.3
        export ORT_MAX_IR_SUPPORTED_VERSION=9
        export ORT_MAX_ML_OPSET_SUPPORTED_VERSION=3
        export ORT_MAX_ONNX_OPSET_SUPPORTED_VERSION=20
        arch -${{ matrix.target-architecture }} pytest
