# Copyright (c) ONNX Project Contributors
#
# SPDX-License-Identifier: Apache-2.0

name: LinuxRelease_aarch64

on:
  workflow_call:  # Indicates that this is a reusable workflow
    inputs:
      os:
        required: true
        type: string
permissions:  # set top-level default permissions as security best practice
  contents: read

jobs:
  build:
    if: github.event_name != 'pull_request' || startsWith( github.base_ref, 'rel-') || contains( github.event.pull_request.labels.*.name, 'run release CIs')
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        python-version: [cp39-cp39, cp310-cp310, cp311-cp311, cp312-cp312, cp313-cp313]
    env:
      # setting up python and docker image
      py: /opt/python/${{ matrix.python-version }}/bin/python
      img: quay.io/pypa/manylinux2014_aarch64

    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        persist-credentials: true

    - name: Checkout submodules
      shell: bash
      run: |
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1

      # setting up qemu for enabling aarch64 binary execution on x86 machine
    - uses: docker/setup-qemu-action@53851d14592bedcffcf25ea515637cff71ef929a # v3.3.0

      # Creating a virtual environment on machine with the help of docker container \
      # and installing the dependencies inside that \
      # so that we can use installed dependencies.
    - name: Install dependencies
      id: install_dependencies
      run: |
        docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
          ${{ env.img }} \
          bash -exc '${{ env.py }} -m pip install -q virtualenv && ${{ env.py }} -m venv .env && \
          source .env/bin/activate && \
          ${{ env.py }} -m pip install -q --only-binary google-re2 -r requirements-release.txt && \
          yum install -y protobuf-compiler protobuf-devel
          deactivate'

      # using created virtual environment in new container and executing the script
    - name: Build manylinux2014_aarch64
      id: build_manylinux
      if: steps.install_dependencies.outcome == 'success'
      run: |
        docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
          ${{ env.img }} \
          bash -exc '\
          source .env/bin/activate && \
          yum install -y sudo && \
          sudo chmod +x .github/workflows/manylinux/entrypoint.sh && \
          sudo bash -x .github/workflows/manylinux/entrypoint.sh ${{ env.py }} manylinux2014_aarch64 ${{ github.event_name }}
          deactivate'

      # using created virtual environment in new container and testing the wheel
    - name: Test wheel with Python ${{ matrix.python-version }}
      if: steps.build_manylinux.outcome == 'success'
      run: |
        docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
          ${{ env.img }} \
          bash -exc '\
          source .env/bin/activate && \
          python -m pip install -q --upgrade pip && \
          python -m pip install -q --only-binary google-re2 -r requirements-release.txt && \
          pip install dist/*manylinux2014_aarch64.whl && \
          pytest && \
          deactivate'

    - uses: actions/upload-artifact@65c4c4a1ddee5b72f698fdd19549f0f0fb45cf08
      if: steps.build_manylinux.outcome == 'success'
      with:
        name: wheels-${{ inputs.os }}-${{ matrix.python-version }}
        path: |
            ./dist/*.whl

    - name: Verify ONNX with the latest numpy and protobuf
      if: steps.build_manylinux.outcome == 'success' && ${{ always() }}
      run: |
         docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
          ${{ env.img }} \
          bash -exc '\
          source .env/bin/activate && \
          python -m pip uninstall -y numpy onnx protobuf && python -m pip install numpy protobuf && \
          python -m pip install dist/*manylinux2014_aarch64.whl && \
          pytest && \
          deactivate'

    - name: Verify ONNX with the minimumly supported packages
      if: steps.build_manylinux.outcome == 'success' && ${{ always() }}
      run: |
         docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
          ${{ env.img }} \
          bash -exc '\
          source .env/bin/activate && \
          python -m pip uninstall -y onnx && python -m pip install -r requirements-min.txt && \
          python -m pip install dist/*manylinux2014_aarch64.whl && \
          pytest && \
          deactivate'

