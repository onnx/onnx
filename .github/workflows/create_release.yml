# Copyright (c) ONNX Project Contributors
#
# SPDX-License-Identifier: Apache-2.0

name: Create Releases
on:
  schedule:
    # Run weekly on Monday 00:00 UTC
    - cron:  '00 00 * * MON'
  push:
    branches: [main, rel-*]
  pull_request:
    branches: [main, rel-*]
    types:
      - labeled  # Trigger when a label is added to a PR, more information: https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#pull_request
  workflow_dispatch:
    inputs:
      publish_pypi_weekly:
        description: 'Publish to pypi-weekly'
        required: true
        type: choice
        options:
          - 'yes'
          - 'no'
        default: 'no'
      publish_testpypi_weekly:
        description: 'Publish to testpypi-weekly'
        required: true
        type: choice
        options:
          - 'yes'
          - 'no'
        default: 'no'

permissions:  # set top-level default permissions as security best practice
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'workflow_dispatch' }}
  cancel-in-progress: true

jobs:

  call-workflow-ubuntu_x86:
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'run release CIs')
    uses: ./.github/workflows/release_linux_x86_64.yml
    with:
      os: "linux_x86_64"    

  call-workflow-ubuntu_aarch64:
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'run release CIs')
    uses: ./.github/workflows/release_linux_aarch64.yml
    with:
      os: "linux_aarch64"

  call-workflow-win:
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'run release CIs')
    uses: ./.github/workflows/release_win.yml
    with:
      os: "win"

  call-workflow-win-freethreading: # experimental
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'run release CIs')
    uses: ./.github/workflows/release_win_freethreading.yml
    with:
      os: "win"
    secrets: inherit


  call-workflow-mac:
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'run release CIs')
    uses: ./.github/workflows/release_mac.yml
    with:
      os: "macos"

  call-workflow-mac-freethreading: # experimental
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'run release CIs')
    uses: ./.github/workflows/release_mac_freethreading.yml
    with:
      os: "macos"
    secrets: inherit
  

  call-workflow-sdist:
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'run release CIs')
    uses: ./.github/workflows/release_sdist.yml
    with:
      os: "macos"


  check_for_publish_release_build_to_pypi:
    name: Check for Publish release build to pypi (including rc-candidates)
    runs-on: ubuntu-latest

    needs: [call-workflow-ubuntu_x86, call-workflow-ubuntu_aarch64, call-workflow-mac, call-workflow-mac-freethreading, call-workflow-win, call-workflow-win-freethreading, call-workflow-sdist]
    if: (!contains(join(needs.*.result, ' '), 'skipped')) &&  (github.repository_owner == 'onnx') && (github.event_name == 'release')

    steps:
      - name: print debug vars
        run: |
          echo "All environment variables:"
          printenv


  check_for_publish_preview_build_to_testpypi_weekly:
    name: Check for Publish preview build to test.pypi-weekly
    runs-on: ubuntu-latest

    needs: [call-workflow-ubuntu_x86, call-workflow-ubuntu_aarch64, call-workflow-mac, call-workflow-mac-freethreading, call-workflow-win, call-workflow-win-freethreading, call-workflow-sdist]
    if: (!contains(join(needs.*.result, ' '), 'skipped')) && (github.event.inputs.publish_testpypi_weekly   == 'yes' ) && (github.ref == 'refs/heads/main') && (github.repository_owner == 'onnx') && (github.event_name == 'workflow_dispatch')

    steps:
      - name: print debug vars
        run: |
          echo "All environment variables:"
          printenv


  publish_preview_build_to_testpypi_weekly:
    name: Publish preview build to test.pypi-weekly
    runs-on: ubuntu-latest
    needs: [check_for_publish_preview_build_to_testpypi_weekly]

    environment:
      name: testpypi-weekly
      url: https://test.pypi.org/p/onnx-weekly

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write

    steps:

      - uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806
        if: (github.event_name == 'workflow_dispatch' )
        with:
          pattern: wheels*
          path: dist
          merge-multiple: true

      - uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806
        if: (github.event_name == 'workflow_dispatch' )
        with:
          pattern: sdist
          path: dist
          merge-multiple: true

      - name: Publish preview build to test.pypi
        if: (github.ref == 'refs/heads/main') && (github.event.inputs.publish_testpypi_weekly == 'yes') && (github.repository_owner == 'onnx')
        
        uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true
          print-hash: true

  check_for_publish_preview_build_to_pypi_weekly:
    name: Check for Publish preview build to pypi-weekly
    runs-on: ubuntu-latest

    needs: [call-workflow-ubuntu_x86, call-workflow-ubuntu_aarch64, call-workflow-mac, call-workflow-mac-freethreading, call-workflow-win, call-workflow-win-freethreading, call-workflow-sdist]
    if: (!contains(join(needs.*.result, ' '), 'skipped')) && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')

    steps:
      - name: placeholder for debug vars
        run: |
          echo "All environment variables:"
          printenv

  publish_preview_build_to_pypi_weekly:
    name: Publish preview build to pypi-weekly
    runs-on: ubuntu-latest
    needs: [check_for_publish_preview_build_to_pypi_weekly]

    environment:
      name: pypi-weekly
      url: https://pypi.org/p/onnx-weekly

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write

    steps:
      - uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806
        if: (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
        with:
          pattern: wheels*
          path: dist
          merge-multiple: true

      - uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806
        if: (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
        with:
          pattern: sdist
          path: dist
          merge-multiple: true

      - name: Publish preview_build to pypi-weekly
        if: (github.ref == 'refs/heads/main') && (github.event_name == 'schedule' || github.event.inputs.publish_pypi_weekly  == 'yes') && (github.repository_owner == 'onnx')
        uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc
        with:   
          repository-url: https://upload.pypi.org/legacy/
          verbose: true     
          print-hash: true  

  publish_release_build_to_pypi:
    name: Publish release build to pypi
    runs-on: ubuntu-latest
    needs: [check_for_publish_release_build_to_pypi]

    environment:
      name: pypi-weekly
      url: https://pypi.org/p/onnx

    permissions:
      contents: write  # IMPORTANT: mandatory for making GitHub Releases
      id-token: write

    steps:
      - uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806        
        with:
          pattern: wheels*
          path: dist
          merge-multiple: true

      - uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806        
        with:
          pattern: sdist
          path: dist
          merge-multiple: true

      - name: Publish release_build to pypi
        if: (github.repository_owner == 'onnx')
        uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc
        with:   
          repository-url: https://upload.pypi.org/legacy/
          verbose: true     
          print-hash: true  
  

  test_source_dist:
    name: test source distribution
    needs: [publish_preview_build_to_pypi_weekly]
    if: github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'run release CIs')
    uses: ./.github/workflows/preview_source_dist_test.yml
    with:
      os: "macos"

  prepare-release:
    name: Release-Prep (p.ex. sigstore, pypi)
    runs-on: ubuntu-latest
    needs: [call-workflow-mac, call-workflow-ubuntu_x86, call-workflow-ubuntu_aarch64, call-workflow-win]
    if: (needs.call-workflow-mac.result == 'success') && (needs.call-workflow-ubuntu_x86.result == 'success') && (needs.call-workflow-ubuntu_aarch64.result == 'success')  && (needs.call-workflow-win.result == 'success')
    permissions:
      contents: write # IMPORTANT: mandatory for making GitHub Releases
      id-token: write # IMPORTANT: mandatory for sigstore
    steps:
      - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16
        with:
          pattern: wheels*
          path: dist
          merge-multiple: true
      - name: Sign the artifacts with sigstore #/home/runner/work/onnx/onnx/dist/*.tar.gz
        # Signing should only be done for the final release and maybe not for release candidates... probably this prep release steps has to be splitted or renamend to prepare signatures

        if: github.event_name != 'pull_request' || startsWith( github.base_ref, 'rel-')
        uses: sigstore/gh-action-sigstore-python@v3.0.0
        with:
          inputs: >-
            /home/runner/work/onnx/onnx/dist/*.whl
      - uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b
        if: github.event_name != 'pull_request' || startsWith( github.base_ref, 'rel-')
        with:
          name: sigstore-files
          path: "/home/runner/work/onnx/onnx/dist/*.sigstore.json"
          # TODO
          # at this point, we have the wheels and could check if they are usable by offline testing...continue-on-error: 
          # For more information about environments and required approvals, see "Using environments for deployment." F
          # We can use a separate requirement for deploy

  #   publish_preview_build_to_pypi_weekly:


  github_release:
    # TODO Add a deployment step for reviewing https://docs.github.com/en/actions/managing-workflow-runs/reviewing-deployments
    name: Release (Add files to github release)
    runs-on: ubuntu-latest
    needs: [prepare-release]
    if: startsWith(github.ref, 'refs/tags/') && startsWith(github.base_ref, 'rel-') && (needs.publish_release_build_to_pypi.result  == 'success')
    steps:
      - uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16
        with:
          pattern: sigstore-files* # TODO change back to python-wheels?
          path: dist
          merge-multiple: true
      # The Release is created by the Github GUI, we only add the files here
      - name: Upload artifact signatures to GitHub Release
        if: startsWith(github.ref, 'refs/tags/') # only publish to PyPI on tag pushes # TODO check exact variants
        env: 
          GITHUB_TOKEN: ${{ github.token }}
        run: >-
          gh release upload '${{ github.ref_name }}' dist/*.sigstore.json