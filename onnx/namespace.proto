// Copyright (c) Facebook Inc. and Microsoft Corporation.
// Licensed under the MIT license.

syntax = "proto2";

package onnx;

// This protobuf defines the ONNX namespace metadata, which is used to
// resolve operator names (op_type fields in onnx.proto) into operator
// definitions (as defined in onnx/defs).
//
// Semantically, ChangelogProto defines the following mapping:
//
//    { op_version: { op_type: op_def } }
//
// i.e., for every operator namespace version, a mapping of operator
// names to operator definitions.  However, in the protobuf, this is
// represented in a compressed, 'changelog' style format.
// You can compute the underlying mapping with the following algorithm:
//
//  - Let M be an empty mapping
//  - For each changelog entry
//      - Remove all 'removed' keys from M
//      - Add all 'added' entries to M
//          (it is an error if an entry to be added already exists)
//      - Yield M as the mapping for 'op_version'

message ChangelogProto {
  repeated ChangelogEntryProto = 1;
}

message ChangelogEntryProto {
  // The operator namespace version this changelog entry describes.
  optional int64 op_version = 1;

  // The operator name bindings which were removed in this version.
  // These removals are backwards compatibility BREAKING changes; so
  // whenever you remove a name, you must issue a new version of the
  // operator namespace.
  repeated string removed = 2; // namespace Operator

  // The operator name bindings which were added in this version.
  // Extra name bindings can be added to this field in a backwards
  // compatible way without bumping the operator namespace version.
  repeated OperatorBindingProto added = 3;
}

// TODO: improve this proto name
message OperatorBindingProto {
  // The operator name which was bound in this version of the namespace.
  optional string op_type = 1; // namespace Operator

  // The operator definition which the name was bound to.
  optional string op_def = 2;  // namespace OperatorDef
}
