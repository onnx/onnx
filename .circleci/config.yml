# NOTE: We only perform the merge in build step and not in test step, because
# all source files will be shared from build to test
merge_with_master: &merge_with_master
  name: Merge Onto Master
  command: |
    if [[ "${CIRCLE_BRANCH}" != "master" ]]; then
      git config --global user.email "circleci.ossci@gmail.com"
      git config --global user.name "CircleCI"

      git config remote.origin.url "$CIRCLE_REPOSITORY_URL"
      git config --add remote.origin.fetch +refs/heads/master:refs/remotes/origin/master
      git fetch --tags --progress "$CIRCLE_REPOSITORY_URL" +refs/heads/master:refs/remotes/origin/master --depth=50 --quiet

      export GIT_MERGE_TARGET=`git log -n 1 --pretty=format:"%H" origin/master`
      echo "GIT_MERGE_TARGET: " ${GIT_MERGE_TARGET}
      export GIT_COMMIT=${CIRCLE_SHA1}
      echo "GIT_COMMIT: " ${GIT_COMMIT}

      git checkout -f ${GIT_COMMIT}
      git reset --hard ${GIT_COMMIT}
      git merge --no-edit --no-ff ${GIT_MERGE_TARGET}
    fi

linux_default: &linux_default
  resource_class: large
  machine:
    image: default
  steps:
  - checkout
  - run:
      <<: *merge_with_master
  - run:
      name: Build and Test
      no_output_timeout: "1h"
      command: |
        export SCCACHE_BUCKET=ossci-compiler-cache-circleci-v2
        export AWS_ACCESS_KEY_ID=AKIAI43PKLK3PGLUWQMA
        export AWS_SECRET_ACCESS_KEY=${CIRCLECI_AWS_SECRET_KEY_FOR_ECR_READ_WRITE}

        sudo pip install awscli
        eval $(aws ecr get-login --region us-east-1 --no-include-email)

        set -ex

        docker pull ${DOCKER_IMAGE}
        sudo pkill -SIGHUP dockerd
        export pid=$(docker run -t -d -w /var/lib/jenkins ${DOCKER_IMAGE})
        docker cp /home/circleci/project/. "$pid:/var/lib/jenkins/workspace"
        (echo 'sudo chown -R jenkins ./workspace && cd ./workspace && git submodule sync && git submodule update --recursive --init && source .circleci/setup.sh && .circleci/build.sh && sccache --show-stats && .circleci/test.sh') | docker exec -e SCCACHE_BUCKET=${SCCACHE_BUCKET} -e AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} -e AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} -u jenkins -i "$pid" bash

jobs:
  py2_gcc5_ubuntu16_04:
    environment:
      DOCKER_IMAGE: "308535385114.dkr.ecr.us-east-1.amazonaws.com/caffe2/py2-gcc5-ubuntu16.04:206"
    <<: *linux_default

workflows:
  version: 2
  build:
    jobs:
      - py2_gcc5_ubuntu16_04
