# reference: https://www.appveyor.com/docs/appveyor-yml/

version: 0.3.{build}

# build all branches by default

image: Visual Studio 2017
platform: x64
configuration: Debug

clone_folder: c:\projects\onnx
clone_depth: 2

# pick as per https://www.appveyor.com/docs/build-environment/#python
environment:
  global:
    ONNX_NAMESPACE: ONNX_NAMESPACE_FOO_BAR_FOR_CI

  matrix:
  # onnx-ml
  - ONNX_ML: 1
    CONDA_PREFIX: C:\Miniconda35-x64
    CMAKE_ARGS: -GNinja
    CC: cl.exe
    CXX: cl.exe

  - ONNX_ML: 1
    CONDA_PREFIX: C:\Miniconda36-x64
    CMAKE_ARGS: -GNinja
    CC: cl.exe
    CXX: cl.exe

  - ONNX_ML: 1
    CONDA_PREFIX: C:\Miniconda36
    CMAKE_ARGS: -GNinja
    CC: cl.exe
    CXX: cl.exe

  - ONNX_ML: 1
    CONDA_PREFIX: C:\Miniconda35
    CMAKE_ARGS: -GNinja
    CC: cl.exe
    CXX: cl.exe

  - ONNX_ML: 1
    CONDA_PREFIX: C:\Miniconda35-x64
    CMAKE_ARGS: -GNinja
    CC: clang-cl.exe
    CXX: clang-cl.exe
    CFLAGS: -m64
    CXXFLAGS: -m64

  - ONNX_ML: 1
    CONDA_PREFIX: C:\Miniconda36-x64
    CMAKE_ARGS: -GNinja
    CC: clang-cl.exe
    CXX: clang-cl.exe
    CFLAGS: -m64
    CXXFLAGS: -m64

  - ONNX_ML: 1
    CONDA_PREFIX: C:\Miniconda36
    CMAKE_ARGS: -GNinja
    CC: clang-cl.exe
    CXX: clang-cl.exe
    CFLAGS: -m32
    CXXFLAGS: -m32

  - ONNX_ML: 1
    CONDA_PREFIX: C:\Miniconda35
    CMAKE_ARGS: -GNinja
    CC: clang-cl.exe
    CXX: clang-cl.exe
    CFLAGS: -m32
    CXXFLAGS: -m32

install:
- cmd: git submodule update --init --recursive

before_build:
- cmd: SET PATH=%CONDA_PREFIX%;%CONDA_PREFIX%\Scripts;%PATH%
- cmd: conda install -y -c conda-forge protobuf numpy
- cmd: pip install pytest-cov nbval ninja

build_script:
# Build and test onnx.
- cmd: for /F "usebackq delims=" %%i in (`python -c "import struct;print( 8 * struct.calcsize('P'))"`) do set /a PYSIZE=%%i
- cmd: if %PYSIZE% NEQ 64 (set VC_ARGS=x86) else (set VC_ARGS=x86_amd64)
- cmd: call "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\Build\\vcvarsall.bat" %VC_ARGS%
- cmd: cd c:\projects\onnx
- cmd: set ONNX_BUILD_TESTS=1
- cmd: python setup.py bdist_wheel --universal --dist-dir .
- cmd: dir /s /b /a-d "onnx_gtests.exe" >UT.txt & set /p _UT= < UT.txt & %_UT%
- cmd: dir /b /a-d "*.whl" >WheelFile.txt & set /p _wheel= < WheelFile.txt
- cmd: pip install %_wheel%
- cmd: pytest -v
- cmd: python onnx/defs/gen_doc.py
- cmd: python onnx/gen_proto.py
# Run type checks
- cmd: pip uninstall -y %_wheel%
- cmd: rm -rf .setuptools-cmake-build
- cmd: pip install -v -e .[mypy]
- cmd: python setup.py typecheck
# TODO: protobuf files generated by generate-data below show format diffs right now.
# Will figure out and fix it in separate PR.
#- cmd: C:\Miniconda36\Scripts\backend-test-tools generate-data
- cmd: git diff --exit-code

on_finish:
  - ps: if($env:CONDA_PREFIX -eq "C:\Miniconda35-x64" -and $env:CC -eq "clang-cl.exe") { $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))}

# add after_test commands to collect logs and such
# add artifacts: -path to collect build artifacts

# commented out to avoid comments on threads
# notifications:
# - provider: GitHubPullRequest
#   on_build_success: true
#   on_build_failure: true
#   on_build_status_changed: true
