[
  {
    "op_type": "Abs",
    "schema": {
      "doc": "Absolute takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the absolute is, y = abs(x), is applied to\nthe tensor elementwise.\n",
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "snippets": [
        {
          "code": "node = onnx.helper.make_node(\n    'Abs',\n    inputs=['x'],\n    outputs=['y'],\n)\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.abs(x)\n\nexpect(node, inputs=[x], outputs=[y],\n       name='test_abs')",
          "summary": "abs"
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Add",
    "schema": {
      "attributes": [
        {
          "description": "If set, defines the broadcast dimensions. See doc for details.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Pass 1 to enable broadcasting",
          "name": "broadcast",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Performs element-wise binary addition (with limited broadcast support).\n\nIf necessary the right-hand-side argument will be broadcasted to match the\nshape of left-hand-side argument. When broadcasting is specified, the second\ntensor can either be of size 1 (a scalar value), or having its shape as a\ncontiguous subset of the first tensor's shape. The starting of the mutually\nequal shape is specified by the argument \"axis\", and if it is not set, suffix\nmatching is assumed. 1-dim expansion doesn't work yet.\n\nFor example, the following tensor shapes are supported (with broadcast=1):\n\n  shape(A) = (2, 3, 4, 5), shape(B) = (,), i.e. B is a scalar\n  shape(A) = (2, 3, 4, 5), shape(B) = (5,)\n  shape(A) = (2, 3, 4, 5), shape(B) = (4, 5)\n  shape(A) = (2, 3, 4, 5), shape(B) = (3, 4), with axis=1\n  shape(A) = (2, 3, 4, 5), shape(B) = (2), with axis=0\n\nAttribute `broadcast=1` needs to be passed to enable broadcasting.\n",
      "inputs": [
        {
          "description": "First operand, should share the type with the second operand.",
          "name": "A",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "Second operand. With broadcasting can be of smaller size than A. If broadcasting is disabled it should be of the same size.",
          "name": "B",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result, has same dimensions and type as A",
          "name": "C",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "snippets": [
        {
          "code": "node = onnx.helper.make_node(\n    'Add',\n    inputs=['x', 'y'],\n    outputs=['sum'],\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(3, 4, 5).astype(np.float32)\nexpect(node, inputs=[x, y], outputs=[x + y],\n       name='test_add')",
          "summary": "add"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Add',\n    inputs=['x', 'y'],\n    outputs=['sum'],\n    broadcast=1,\n)\n\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.random.randn(5).astype(np.float32)\nexpect(node, inputs=[x, y], outputs=[x + y],\n       name='test_add_bcast')",
          "summary": "add_broadcast"
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "And",
    "schema": {
      "attributes": [
        {
          "description": "If set, defines the broadcast dimensions.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Enable broadcasting",
          "name": "broadcast",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Returns the tensor resulted from performing the `and` logical operation\nelementwise on the input tensors `A` and `B`.\n\nIf broadcasting is enabled, the right-hand-side argument will be broadcasted\nto match the shape of left-hand-side argument. See the doc of `Add` for a\ndetailed description of the broadcasting rules.\n",
      "inputs": [
        {
          "description": "Left input tensor for the logical operator.",
          "name": "A",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(bool)"
          ]
        },
        {
          "description": "Right input tensor for the logical operator.",
          "name": "B",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(bool)"
          ]
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result tensor.",
          "name": "C",
          "optional": false,
          "typeStr": "T1",
          "types": [
            "tensor(bool)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains input to boolean tensor.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains output to boolean tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "op_type": "ArgMax",
    "schema": {
      "attributes": [
        {
          "description": "The axis in which to compute the arg indices",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Keep the reduced dimension or not, default 1 mean keep reduced dimension.",
          "name": "keepdims",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Computes the indices of the max elements of the input tensor's element along the \nprovided axis. The resulted tensor has the same rank as the input if keepdims equal 1. \nIf keepdims equal 0, then the resulted tensor have the reduced dimension pruned. \nThe type of the output tensor is integer.",
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reduced output tensor with integer data type.",
          "name": "reduced",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "ArgMin",
    "schema": {
      "attributes": [
        {
          "description": "The axis in which to compute the arg indices",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Keep the reduced dimension or not, default 1 mean keep reduced dimension.",
          "name": "keepdims",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Computes the indices of the min elements of the input tensor's element along the \nprovided axis. The resulted tensor has the same rank as the input if keepdims equal 1. \nIf keepdims equal 0, then the resulted tensor have the reduced dimension pruned. \nThe type of the output tensor is integer.",
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reduced output tensor with integer data type.",
          "name": "reduced",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "AveragePool",
    "schema": {
      "attributes": [
        {
          "description": "auto_pad must be either SAME_UPPER, SAME_LOWER or VALID. Where SAME_UPPER or SAME_LOWER mean pad the input so that the ouput size match the input.In case of odd number add the extra padding at the end for SAME_UPPER and at the begining for SAME_LOWER. VALID mean no padding. DEPRECATION NOTE: auto_pad is only intended to support legacy uses, and for framework authors, one is explicitly encouraged to use explicit padding specified in the pads attribute.",
          "name": "auto_pad",
          "required": false,
          "type": "string"
        },
        {
          "description": "The size of the kernel along each axis.",
          "name": "kernel_shape",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "Padding for lower and upper side along each axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the lower and upper part of the corresponding axis. So `pads` will have two values per axis, first value corresponding to the number of pixels added to the begining of the axis and the second value corresponding to the number of pixels add at the end of the axis. This attribute cannot be used simultaneously with auto_pad attribute.",
          "name": "pads",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "Stride along each axis.",
          "name": "strides",
          "required": false,
          "type": "list of ints"
        }
      ],
      "doc": "AveragePool consumes an input tensor X and applies average pooling across the\n the tensor according to kernel sizes, stride sizes, and pad lengths.\n average pooling consisting of computing the average on all values of a \n subset of the input tensor according to the kernel size and downsampling the\n data into the output tensor Y for further processing.",
      "inputs": [
        {
          "description": "Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimension are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size.",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output data tensor from average or max pooling across the input tensor. Dimensions will vary based on various kernel, stride, and pad sizes.",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "BatchNormalization",
    "schema": {
      "attributes": [
        {
          "description": "The epsilon value to use to avoid division by zero.",
          "name": "epsilon",
          "required": false,
          "type": "float"
        },
        {
          "description": "If set to nonzero, run spatial batch normalization in test mode.",
          "name": "is_test",
          "required": false,
          "type": "int"
        },
        {
          "description": "Factor used in computing the running mean and variance.e.g., running_mean = running_mean * momentum + mean * (1 - momentum)",
          "name": "momentum",
          "required": false,
          "type": "float"
        },
        {
          "description": "If true, compute the mean and variance across all spatial elements If false, compute the mean and variance across per feature.",
          "name": "spatial",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Carries out batch normalization as described in the paper\nhttps://arxiv.org/abs/1502.03167. Depending on the mode it is being run,\nthere are multiple cases for the number of outputs, which we list below:\n\nOutput case #1: Y, mean, var, saved_mean, saved_var (training mode)\nOutput case #2: Y (test mode)\n    ",
      "inputs": [
        {
          "description": "The input 4-dimensional tensor of shape NCHW or NHWC depending on the order parameter.",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "The scale as a 1-dimensional tensor of size C to be applied to the output.",
          "name": "scale",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "The bias as a 1-dimensional tensor of size C to be applied to the output.",
          "name": "bias",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "The running mean (training) or the estimated mean (testing) as a 1-dimensional tensor of size C.",
          "name": "mean",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "The running variance (training) or the estimated variance (testing) as a 1-dimensional tensor of size C.",
          "name": "var",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 5,
      "max_output": 2147483647,
      "min_input": 5,
      "min_output": 0,
      "outputs": [
        {
          "description": "The output 4-dimensional tensor of the same shape as X.",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "The running mean after the BatchNormalization operator. Must be in-place with the input mean. Should not be used for testing.",
          "name": "mean",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "The running variance after the BatchNormalization operator. Must be in-place with the input var. Should not be used for testing.",
          "name": "var",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "Saved mean used during training to speed up gradient computation. Should not be used for testing.",
          "name": "saved_mean",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "Saved variance used during training to speed up gradient computation. Should not be used for testing.",
          "name": "saved_var",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Cast",
    "schema": {
      "attributes": [
        {
          "description": "The data type to which the elements of the input tensor are cast.Strictly must be one of the types from DataType enum in TensorProto",
          "name": "to",
          "required": false,
          "type": "string"
        }
      ],
      "doc": "The operator casts the elements of a given input tensor to a data type\nspecified by the 'to' argument and returns an output tensor of the same size in\nthe converted type. The 'to' argument must be one of the data types specified\nin the 'DataType' enum field in the TensorProto message. If the 'to' argument\nis not provided or is not one of the enumerated types in DataType, Caffe2\nthrows an Enforce error.\n\nNOTE: Casting to and from strings is not supported yet.\n",
      "inputs": [
        {
          "description": "Input tensor to be cast.",
          "name": "input",
          "optional": false,
          "typeStr": "T1",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor with the same shape as input with type specified by the 'to' argument",
          "name": "output",
          "optional": false,
          "typeStr": "T2",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input types to float tensors.",
          "type_param_str": "T1"
        },
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain output types to float tensors.",
          "type_param_str": "T2"
        }
      ]
    }
  },
  {
    "op_type": "Ceil",
    "schema": {
      "doc": "Ceil takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the ceil is, y = ceil(x), is applied to\nthe tensor elementwise.\n",
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Clip",
    "schema": {
      "attributes": [
        {
          "description": "Maximum value, above which element is replaced by max",
          "name": "max",
          "required": false,
          "type": "float"
        },
        {
          "description": "Minimum value, under which element is replaced by min",
          "name": "min",
          "required": false,
          "type": "float"
        }
      ],
      "doc": "Clip operator limits the given input within an interval. The interval is\nspecified with arguments 'min' and 'max'. They default to\nnumeric_limits::lowest() and numeric_limits::max() respectively. The clipping\noperation can be done in in-place fashion too, where the input and output blobs\nare the same.\n",
      "inputs": [
        {
          "description": "Input tensor whose elements to be clipped",
          "name": "input",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor with clipped input elements",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Concat",
    "schema": {
      "attributes": [
        {
          "description": "Which axis to concat on",
          "name": "axis",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Concatenate a list of tensors into a single tensor",
      "inputs": [
        {
          "description": "List of tensors for concatenation",
          "name": "inputs...",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 2147483647,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Concatenated tensor",
          "name": "concat_result",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Constant",
    "schema": {
      "attributes": [
        {
          "description": "The value for the elements of the output tensor.",
          "name": "value",
          "required": false,
          "type": "tensor"
        }
      ],
      "doc": "A constant tensor.",
      "max_input": 0,
      "max_output": 1,
      "min_input": 0,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor containing the same value of the provided tensor.",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "snippets": [
        {
          "code": "values = np.random.randn(5, 5).astype(np.float32)\nnode = onnx.helper.make_node(\n    'Constant',\n    inputs=[],\n    outputs=['values'],\n    value=onnx.helper.make_tensor(\n        name='const_tensor',\n        data_type=onnx.TensorProto.FLOAT,\n        dims=values.shape,\n        vals=values.flatten().astype(float),\n    ),\n)\n\nexpect(node, inputs=[], outputs=[values],\n       name='test_constant')",
          "summary": "constant"
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Conv",
    "schema": {
      "attributes": [
        {
          "description": "auto_pad must be either SAME_UPPER, SAME_LOWER or VALID. Where SAME_UPPER or SAME_LOWER mean pad the input so that the ouput size match the input.In case of odd number add the extra padding at the end for SAME_UPPER and at the begining for SAME_LOWER. VALID mean no padding. DEPRECATION NOTE: auto_pad is only intended to support legacy uses, and for framework authors, one is explicitly encouraged to use explicit padding specified in the pads attribute.",
          "name": "auto_pad",
          "required": false,
          "type": "string"
        },
        {
          "description": "dilation value along each axis of the filter.",
          "name": "dilations",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "number of groups input channels and output channels are divided into",
          "name": "group",
          "required": false,
          "type": "int"
        },
        {
          "description": "The shape of the convolution kernel.",
          "name": "kernel_shape",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "Padding for lower and upper side along each axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the lower and upper part of the corresponding axis. So `pads` will have two values per axis, first value corresponding to the number of pixels added to the begining of the axis and the second value corresponding to the number of pixels add at the end of the axis. The order should be axis_0_begin, axis_0_end, axis_1_begin, ..., axis_n_begin, axis_n_end, n is kernel's dimension.This attribute cannot be used simultaneously with auto_pad attribute.",
          "name": "pads",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "stride along each axis.",
          "name": "strides",
          "required": false,
          "type": "list of ints"
        }
      ],
      "doc": "The convolution operator consumes an input tensor and a filter, and\ncomputes the output.",
      "inputs": [
        {
          "description": "Input data tensor from previous layer; has size (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and width. Note that this is for the 2D image.Otherwise the size is (N x D1 x D2 ... x Dn)",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "The weight tensor that will be used in the convolutions; has size (M x C x kH x kW), where C is the number of channels, and kH and kW are the height and width of the kernel, and M is the number of feature maps. For more than 2 dimensions, the kernel shape will be (M x C x k1 x k2 x ... x kn), where is the dimension of the kernel",
          "name": "weights",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "Optional 1D bias to be added to the convolution, has size of M.",
          "name": "bias",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 3,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output data tensor that contains the result of the convolution. The output dimensions are functions of the kernel size, stride size, and pad lengths.",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "ConvTranspose",
    "schema": {
      "attributes": [
        {
          "description": "auto_pad must be either SAME_UPPER, SAME_LOWER or VALID. Where SAME_UPPER or SAME_LOWER mean pad the input so that the ouput size match the input.In case of odd number add the extra padding at the end for SAME_UPPER and at the begining for SAME_LOWER. VALID mean no padding.",
          "name": "auto_pad",
          "required": false,
          "type": "string"
        },
        {
          "description": "dilation value along each axis of the filter.",
          "name": "dilations",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "number of groups input channels and output channels are divided into",
          "name": "group",
          "required": false,
          "type": "int"
        },
        {
          "description": "The shape of the convolution kernel.",
          "name": "kernel_shape",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "The shape of the output.",
          "name": "output_shape",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "Padding for lower and upper side along each axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the lower and upper part of the corresponding axis. So `pads` will have two values per axis, first value corresponding to the number of pixels added to the begining of the axis and the second value corresponding to the number of pixels add at the end of the axis. This attribute cannot be used simultaneously with auto_pad attribute.",
          "name": "pads",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "stride along each axis.",
          "name": "strides",
          "required": false,
          "type": "list of ints"
        }
      ],
      "doc": "The convolution transpose operator consumes an input tensor and a filter,\nand computes the output.",
      "inputs": [
        {
          "description": "Input data tensor from previous layer; has size (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and width. Note that this is for the 2D image.Otherwise the size is (N x D1 x D2 ... x Dn)",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "The weight tensor that will be used in the convolutions; has size (C x M x kH x kW), where C is the number of channels, and kH and kW are the height and width of the kernel, and M is the number of feature maps. For more than 2 dimensions, the kernel shape will be (C x M x k1 x k2 x ... x kn), where is the dimension of the kernel",
          "name": "weights",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "Optional 1D bias to be added to the convolution, has size of C.",
          "name": "bias",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 3,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output data tensor that contains the result of the convolution. The output dimensions are functions of the kernel size, stride size, and pad lengths.",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "DepthToSpace",
    "schema": {
      "attributes": [
        {
          "description": "Blocks of [blocksize, blocksize] are moved.",
          "name": "blocksize",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "DepthToSpace rearranges (permutes) data from depth into blocks of spatial data. \nThis is the reverse transformation of SpaceToDepth. More specifically, this op outputs a copy of \nthe input tensor where values from the depth dimension are moved in spatial blocks to the height \nand width dimensions.\n",
      "inputs": [
        {
          "description": "Input tensor of [N,C,H,W], where N is the batch axis, C is the channel or depth, H is the height and W is the width.",
          "name": "input",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor of [N, C/(blocksize * blocksize), H * blocksize, W * blocksize].",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Div",
    "schema": {
      "attributes": [
        {
          "description": "If set, defines the broadcast dimensions. See doc for details.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Pass 1 to enable broadcasting",
          "name": "broadcast",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Performs element-wise binary division (with limited broadcast support).\n\nIf necessary the right-hand-side argument will be broadcasted to match the\nshape of left-hand-side argument. When broadcasting is specified, the second\ntensor can either be of size 1 (a scalar value), or having its shape as a\ncontiguous subset of the first tensor's shape. The starting of the mutually\nequal shape is specified by the argument \"axis\", and if it is not set, suffix\nmatching is assumed. 1-dim expansion doesn't work yet.\n\nFor example, the following tensor shapes are supported (with broadcast=1):\n\n  shape(A) = (2, 3, 4, 5), shape(B) = (,), i.e. B is a scalar\n  shape(A) = (2, 3, 4, 5), shape(B) = (5,)\n  shape(A) = (2, 3, 4, 5), shape(B) = (4, 5)\n  shape(A) = (2, 3, 4, 5), shape(B) = (3, 4), with axis=1\n  shape(A) = (2, 3, 4, 5), shape(B) = (2), with axis=0\n\nAttribute `broadcast=1` needs to be passed to enable broadcasting.\n",
      "inputs": [
        {
          "description": "First operand, should share the type with the second operand.",
          "name": "A",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "Second operand. With broadcasting can be of smaller size than A. If broadcasting is disabled it should be of the same size.",
          "name": "B",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result, has same dimensions and type as A",
          "name": "C",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Dropout",
    "schema": {
      "attributes": [
        {
          "description": "(int, default 0) if nonzero, run dropout in test mode where the output is simply Y = X.",
          "name": "is_test",
          "required": false,
          "type": "int"
        },
        {
          "description": "(float, default 0.5) the ratio of random dropout",
          "name": "ratio",
          "required": false,
          "type": "float"
        }
      ],
      "doc": "Dropout takes one input data (Tensor<float>) and produces two Tensor outputs,\noutput (Tensor<float>) and mask (Tensor<bool>). Depending on whether it is in\ntest mode or not, the output Y will either be a random dropout, or a simple\ncopy of the input. Note that our implementation of Dropout does scaling in\nthe training phase, so during testing nothing needs to be done.\n",
      "inputs": [
        {
          "description": "The input data as Tensor.",
          "name": "data",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 2,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The output.",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "The output mask. If is_test is nonzero, this output is not filled.",
          "name": "mask",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Elu",
    "schema": {
      "attributes": [
        {
          "description": "Coefficient of ELU default to 1.0.",
          "name": "alpha",
          "required": false,
          "type": "float"
        }
      ],
      "doc": "Elu takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the function `f(x) = alpha * (exp(x) - 1.) for x <\n0`, `f(x) = x for x >= 0`., is applied to the tensor elementwise.\n\n",
      "inputs": [
        {
          "description": "1D input tensor",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "1D input tensor",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Equal",
    "schema": {
      "attributes": [
        {
          "description": "If set, defines the broadcast dimensions.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Enable broadcasting",
          "name": "broadcast",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Returns the tensor resulted from performing the `equal` logical operation\nelementwise on the input tensors `A` and `B`.\n\nIf broadcasting is enabled, the right-hand-side argument will be broadcasted\nto match the shape of left-hand-side argument. See the doc of `Add` for a\ndetailed description of the broadcasting rules.\n",
      "inputs": [
        {
          "description": "Left input tensor for the logical operator.",
          "name": "A",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "Right input tensor for the logical operator.",
          "name": "B",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result tensor.",
          "name": "C",
          "optional": false,
          "typeStr": "T1",
          "types": [
            "tensor(bool)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrains input to float tensors.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains output to boolean tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "op_type": "Exp",
    "schema": {
      "doc": "Calculates the exponential of the given input tensor, element-wise. This\noperation can be done in an in-place fashion too, by providing the same input\nand output blobs.\n",
      "inputs": [
        {
          "description": "Input tensor",
          "name": "input",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The exponential of the input tensor computed element-wise",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Flatten",
    "schema": {
      "attributes": [
        {
          "description": "(Default to 1) Indicate up to which input dimensions (exclusive) should be flattened to the outer dimension of the output",
          "name": "axis",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Flattens the input tensor into a 2D matrix. If input tensor has shape\n(d_0, d_1, ... d_n) then the output will have shape\n(d_0 X d_1 ... d_(axis-1), d_axis X d_(axis+1) ... X dn).\n",
      "inputs": [
        {
          "description": "A tensor of rank >= axis.",
          "name": "input",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "A 2D tensor with the contents of the input tensor, with input dimensions up to axis flattened to the outer dimension of the output and remaining input dimensions flattened into the inner dimension of the output.",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Floor",
    "schema": {
      "doc": "Floor takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the floor is, y = floor(x), is applied to\nthe tensor elementwise.\n",
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "GRU",
    "schema": {
      "attributes": [
        {
          "description": "Optional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM.",
          "name": "activation_alpha",
          "required": false,
          "type": "list of floats"
        },
        {
          "description": "Optional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM.",
          "name": "activation_beta",
          "required": false,
          "type": "list of floats"
        },
        {
          "description": "A list of 2 (or 4 if bidirectional) activation functions for update, reset, and hidden gates. The activation functions must be one of the activation functions specified above. Optional: See the equations for default if not specified.",
          "name": "activations",
          "required": false,
          "type": "list of strings"
        },
        {
          "description": "Cell clip threshold. Clipping bounds the elements of a tensor in the range of [-threshold, +threshold] and is applied to the input of activations. No clip if not specified.",
          "name": "clip",
          "required": false,
          "type": "float"
        },
        {
          "description": "Specify if the RNN is forward, reverse, or bidirectional. Must be one of forward (default), reverse, or bidirectional.",
          "name": "direction",
          "required": false,
          "type": "string"
        },
        {
          "description": "Number of neurons in the hidden layer",
          "name": "hidden_size",
          "required": false,
          "type": "int"
        },
        {
          "description": "The sequence output for the hidden is optional if 0. Default 0.",
          "name": "output_sequence",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Computes an one-layer GRU. This operator is usually supported via some custom\nimplementation such as CuDNN.\n\nNotations:\n\n`X` - input tensor\n\n`z` - update gate\n\n`r` - reset gate\n\n`h` - hidden gate\n\n`t` - time step (t-1 means previous time step)\n\n`W[zrh]` - W parameter weight matrix for update, reset, and hidden gates\n\n`R[zrh]` - R recurrence weight matrix for update, reset, and hidden gates\n\n`Wb[zrh]` - W bias vectors for update, reset, and hidden gates\n\n`Rb[zrh]` - R bias vectors for update, reset, and hidden gates\n\n`WB[zrh]` - W parameter weight matrix for backward update, reset, and hidden gates\n\n`RB[zrh]` - R recurrence weight matrix for backward update, reset, and hidden gates\n\n`WBb[zrh]` - W bias vectors for backward update, reset, and hidden gates\n\n`RBb[zrh]` - R bias vectors for backward update, reset, and hidden gates\n\n`H` - Hidden state\n\n`num_directions` - 2 if direction == bidirectional else 1\n\nActivation functions:\n\n  relu(x)                - max(0, x)\n\n  tanh(x)                - (1 - e^{-2x})/(1 + e^{-2x})\n\n  sigmoid(x)             - 1/(1 + e^{-x})\n\n  (NOTE: Below are optional)\n\n  linear(x)              - alpha*x + beta\n\n  leakyRelu(x)           - x if x >= 0 else alpha * x\n\n  thresholdedRelu(x)     - x if x >= alpha else 0\n\n  pRelu(xi)              - xi if xi >= 0 else alpha[i]* xi over dim 0\n\n  scaledTanh(x)          - alpha*tanh(beta*x)\n\n  sigmoidHard(x)         - min(max(alpha*x + beta, 0), 1)\n\n  elu(x)                 - x if x >= 0 else alpha*(e^x - 1)\n\n  softsign(x)            - x/(1 + |x|)\n\n  softplus(x)            - log(1 + e^x)\n\n  parametricSoftplus(xi) - alpha[i]*log(1 + e^{beta[i]* xi}) over dim 0\n\nEquations (Default: f=sigmoid, g=tanh):\n\n  - zt = f(Xt*(Wz^T) + Ht-1*Rz + Wbz + Rbz)\n\n  - rt = f(Xt*(Wr^T) + Ht-1*Rr + Wbr + Rbr)\n\n  - ht = g(Xt*(Wh^T) + rt*(Ht-1*Rh + Rbh) + Wbh)\n\n  - Ht = (1 - zt) (.) ht + it (.) Ht-1\n",
      "inputs": [
        {
          "description": "The input sequences packed (and potentially padded) into one 3-D tensor with the shape of `[seq_length, batch_size, input_size]`.",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "The weight tensor for the gates. Concatenation of `W[zrh]` and `WB[zrh]` (if bidirectional) along dimension 0. This tensor has shape `[num_directions, 3*hidden_size, input_size]`.",
          "name": "W",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "The recurrence weight tensor. Concatenation of `R[zrh]` and `RB[zrh]` (if bidirectional) along dimension 0. This tensor has shape `[num_directions, 3*hidden_size, hidden_size]`.",
          "name": "R",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "The bias tensor for the gates. Concatenation of `[Wb[zrh], Rb[zrh]]` and `[WBb[zrh], RBb[zrh]]` (if bidirectional) along dimension 0. This tensor has shape `[num_directions, 6*hidden_size]`. Optional: If not specified - assumed to be 0",
          "name": "bias",
          "optional": true,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "Optional tensor specifying lengths of the sequences in a batch. If not specified - assumed all sequences in the batch to have length `seq_length`. It has shape `[batch_size]`.",
          "name": "sequence_lens",
          "optional": true,
          "typeStr": "T1",
          "types": [
            "tensor(int32)"
          ]
        },
        {
          "description": "Optional initial value of the hidden. If not specified - assumed to be 0. It has shape `[num_directions, batch_size, hidden_size]`.",
          "name": "initial_h",
          "optional": true,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 6,
      "max_output": 2,
      "min_input": 3,
      "min_output": 1,
      "outputs": [
        {
          "description": "A tensor that concats all the intermediate output values of the hidden. It has shape `[seq_length, num_directions, batch_size, hidden_size]`. It is optional if `output_sequence` is 0.",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "The last output value of the hidden. It has shape `[num_directions, batch_size, hidden_size]`.",
          "name": "Y_h",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(int32)"
          ],
          "description": "Constrain seq_lens to integer tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "op_type": "Gather",
    "schema": {
      "doc": "Given `data` tensor of rank r >= 1, and `indices` tensor of rank q, gather\nentries of the outer-most dimension of `data` indexed by `indices`, and concatenate\nthem in an output tensor of rank q + (r - 1).\n\nExample:\n  data  = [\n      [1.0, 1.2],\n      [2.3, 3.4],\n      [4.5, 5.7],\n  ]\n  indices = [\n      [0, 1],\n      [1, 2],\n  ]\n  output = [\n      [\n          [1.0, 1.2],\n          [2.3, 3.4],\n      ],\n      [\n          [2.3, 3.4],\n          [4.5, 5.7],\n      ],\n  ]\n",
      "inputs": [
        {
          "description": "Tensor of rank r >= 1.",
          "name": "data",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "Tensor of int32/int64 indices, of any rank q.",
          "name": "indices",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Tensor of rank q + (r - 1).",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Gemm",
    "schema": {
      "attributes": [
        {
          "description": "Scalar multiplier for the product of input tensors A * B",
          "name": "alpha",
          "required": false,
          "type": "float"
        },
        {
          "description": "Scalar multiplier for input tensor C",
          "name": "beta",
          "required": false,
          "type": "float"
        },
        {
          "description": "Whether C should be broadcasted",
          "name": "broadcast",
          "required": false,
          "type": "int"
        },
        {
          "description": "Whether A should be transposed",
          "name": "transA",
          "required": false,
          "type": "int"
        },
        {
          "description": "Whether B should be transposed",
          "name": "transB",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "General Matrix multiplication:\nhttps://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms#Level_3\nCompute Y = alpha * A * B + beta * C, where input tensor A has dimension (M X K)\n, input tensor B has dimension (K X N), input tensor C and output tensor Y have\ndimension (M X N). Input tensor C can be used inplace as the output tensor Y.\nIf attribute broadcast is non-zero, input tensor C will be broadcasted to match\nthe dimension requirement. If A can be transposed before doing the computation\nif attribute transA is non-zero, same for B and transB.\n",
      "inputs": [
        {
          "description": "Input tensor A",
          "name": "A",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "Input tensor B",
          "name": "B",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "Input tensor C, can be inplace.",
          "name": "C",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 3,
      "max_output": 1,
      "min_input": 3,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor.",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "GlobalAveragePool",
    "schema": {
      "doc": "GlobalAveragePool consumes an input tensor X and applies average pooling across the\n the values in the same channel. This is equivalent to AveragePool with kernel size\n equal to the spatial dimension of input tensor.",
      "inputs": [
        {
          "description": "Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimension are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size.",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output data tensor from pooling across the input tensor. Dimensions will be N x C x 1 x 1",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "GlobalLpPool",
    "schema": {
      "attributes": [
        {
          "description": "p value of the Lp norm used to pool over the input data, default is 2.0.",
          "name": "p",
          "required": false,
          "type": "float"
        }
      ],
      "doc": "GlobalLpPool consumes an input tensor X and applies lp pool pooling across the\n the values in the same channel. This is equivalent to LpPool with kernel size\n equal to the spatial dimension of input tensor.",
      "inputs": [
        {
          "description": "Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimension are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size.",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output data tensor from pooling across the input tensor. Dimensions will be N x C x 1 x 1",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "GlobalMaxPool",
    "schema": {
      "doc": "GlobalMaxPool consumes an input tensor X and applies max pooling across the\n the values in the same channel. This is equivalent to MaxPool with kernel size\n equal to the spatial dimension of input tensor.",
      "inputs": [
        {
          "description": "Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimension are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size.",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output data tensor from pooling across the input tensor. Dimensions will be N x C x 1 x 1",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Greater",
    "schema": {
      "attributes": [
        {
          "description": "If set, defines the broadcast dimensions.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Enable broadcasting",
          "name": "broadcast",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Returns the tensor resulted from performing the `greater` logical operation\nelementwise on the input tensors `A` and `B`.\n\nIf broadcasting is enabled, the right-hand-side argument will be broadcasted\nto match the shape of left-hand-side argument. See the doc of `Add` for a\ndetailed description of the broadcasting rules.\n",
      "inputs": [
        {
          "description": "Left input tensor for the logical operator.",
          "name": "A",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "Right input tensor for the logical operator.",
          "name": "B",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result tensor.",
          "name": "C",
          "optional": false,
          "typeStr": "T1",
          "types": [
            "tensor(bool)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrains input to float tensors.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains output to boolean tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "op_type": "HardSigmoid",
    "schema": {
      "attributes": [
        {
          "description": "Value of alpha",
          "name": "alpha",
          "required": false,
          "type": "float"
        },
        {
          "description": "Value of beta",
          "name": "beta",
          "required": false,
          "type": "float"
        }
      ],
      "doc": "HardSigmoid takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the HardSigmoid function, y = max(0, min(1, alpha * x + beta)),\nis applied to the tensor elementwise.\n",
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Hardmax",
    "schema": {
      "attributes": [
        {
          "description": "(int) default to 1; describes the axis of the inputs when coerced to 2D; defaults to one because the 0th axis most likely describes the batch_size",
          "name": "axis",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "The operator computes the hardmax normalized values for each layer in the batch\n of the given input. The input is a 2-D tensor (Tensor<float>) of size\n(batch_size x input_feature_dimensions). The output tensor has the same shape\nand contains the hardmax normalized values of the corresponding input.\n\nX does not need to explicitly be a 2D vector; rather, it will be\ncoerced into one. For an arbitrary n-dimensional tensor\nX \\in [a_0, a_1, ..., a_{k-1}, a_k, ..., a_{n-1}] and k is\nthe axis provided, then X will be coerced into a 2-dimensional tensor with\ndimensions [a_0 * ... * a_{k-1}, a_k * ... * a_{n-1}]. For the default\ncase where axis=1, this means the X tensor will be coerced into a 2D tensor\nof dimensions [a_0, a_1 * ... * a_{n-1}], where a_0 is often the batch size.\nIn this situation, we must have a_0 = N and a_1 * ... * a_{n-1} = D.\nEach of these dimensions must be matched correctly, or else the operator\nwill throw errors.\n",
      "inputs": [
        {
          "description": "The input tensor that's coerced into a 2D matrix of size (NxD) as described above.",
          "name": "input",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The softmax normalized output values with the same shape as input tensor.",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "InstanceNormalization",
    "schema": {
      "attributes": [
        {
          "description": "The epsilon value to use to avoid division by zero.",
          "name": "epsilon",
          "required": false,
          "type": "float"
        }
      ],
      "doc": "Carries out instance normalization as described in the paper\nhttps://arxiv.org/abs/1607.08022. \n\ny = scale * (x - mean) / sqrt(variance + epsilon) + bias, \nwhere mean and bias are computed per instance per channel. \n\n",
      "inputs": [
        {
          "description": "The input 4-dimensional tensor of shape NCHW.",
          "name": "input",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "The input 1-dimensional scale tensor of size C.",
          "name": "scale",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "The input 1-dimensional bias tensor of size C.",
          "name": "bias",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 3,
      "max_output": 1,
      "min_input": 3,
      "min_output": 1,
      "outputs": [
        {
          "description": "The output 4-dimensional tensor of the same shape as input.",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "LRN",
    "schema": {
      "attributes": [
        {
          "description": "Scaling parameter",
          "name": "alpha",
          "required": true,
          "type": "float"
        },
        {
          "description": "The exponent",
          "name": "beta",
          "required": true,
          "type": "float"
        },
        {
          "description": "Default to 1",
          "name": "bias",
          "required": false,
          "type": "float"
        },
        {
          "description": "The number of channels to sum over",
          "name": "size",
          "required": true,
          "type": "int"
        }
      ],
      "doc": "Local Response Normalization. It normalizes over local input regions.\nEach input value is divided by\n(bias+(alpha/size)*sum(xi^2 for every xi in the local region))^beta.\n",
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output  types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "LSTM",
    "schema": {
      "attributes": [
        {
          "description": "Optional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM.",
          "name": "activation_alpha",
          "required": false,
          "type": "list of floats"
        },
        {
          "description": "Optional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM.",
          "name": "activation_beta",
          "required": false,
          "type": "list of floats"
        },
        {
          "description": "A list of 3 (or 6 if bidirectional) activation functions for input, output, forget, cell, and hidden. The activation functions must be one of the activation functions specified above. Optional: See the equations for default if not specified.",
          "name": "activations",
          "required": false,
          "type": "list of strings"
        },
        {
          "description": "Cell clip threshold. Clipping bounds the elements of a tensor in the range of [-threshold, +threshold] and is applied to the input of activations. No clip if not specified.",
          "name": "clip",
          "required": false,
          "type": "float"
        },
        {
          "description": "Specify if the RNN is forward, reverse, or bidirectional. Must be one of forward (default), reverse, or bidirectional.",
          "name": "direction",
          "required": false,
          "type": "string"
        },
        {
          "description": "Number of neurons in the hidden layer",
          "name": "hidden_size",
          "required": false,
          "type": "int"
        },
        {
          "description": "Couple the input and forget gates if 1, default 0.",
          "name": "input_forget",
          "required": false,
          "type": "int"
        },
        {
          "description": "The sequence output for the hidden is optional if 0. Default 0.",
          "name": "output_sequence",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Computes an one-layer LSTM. This operator is usually supported via some\ncustom implementation such as CuDNN.\n\nNotations:\n\n`X` - input tensor\n\n`i` - input gate\n\n`o` - output gate\n\n`f` - forget gate\n\n`c` - cell gate\n\n`t` - time step (t-1 means previous time step)\n\n`W[iofc]` - W parameter weight matrix for input, output, forget, and cell gates\n\n`R[iofc]` - R recurrence weight matrix for input, output, forget, and cell gates\n\n`Wb[iofc]` - W bias vectors for input, output, forget, and cell gates\n\n`Rb[iofc]` - R bias vectors for input, output, forget, and cell gates\n\n`P[iof]`  - P peephole weight vector for input, output, and forget gates\n\n`WB[iofc]` - W parameter weight matrix for backward input, output, forget, and cell gates\n\n`RB[iofc]` - R recurrence weight matrix for backward input, output, forget, and cell gates\n\n`WBb[iofc]` - W bias vectors for backward input, output, forget, and cell gates\n\n`RBb[iofc]` - R bias vectors for backward input, output, forget, and cell gates\n\n`PB[iof]`  - P peephole weight vector for backward input, output, and forget gates\n\n`H` - Hidden state\n\n`num_directions` - 2 if direction == bidirectional else 1\n\nActivation functions:\n\n  relu(x)                - max(0, x)\n\n  tanh(x)                - (1 - e^{-2x})/(1 + e^{-2x})\n\n  sigmoid(x)             - 1/(1 + e^{-x})\n\n  (NOTE: Below are optional)\n\n  linear(x)              - alpha*x + beta\n\n  leakyRelu(x)           - x if x >= 0 else alpha * x\n\n  thresholdedRelu(x)     - x if x >= alpha else 0\n\n  pRelu(xi)              - xi if xi >= 0 else alpha[i]* xi over dim 0\n\n  scaledTanh(x)          - alpha*tanh(beta*x)\n\n  sigmoidHard(x)         - min(max(alpha*x + beta, 0), 1)\n\n  elu(x)                 - x if x >= 0 else alpha*(e^x - 1)\n\n  softsign(x)            - x/(1 + |x|)\n\n  softplus(x)            - log(1 + e^x)\n\n  parametricSoftplus(xi) - alpha[i]*log(1 + e^{beta[i]* xi}) over dim 0\n\nEquations (Default: f=sigmoid, g=tanh, h=tanh):\n\n  - it = f(Xt*(Wi^T) + Ht-1*Ri + Pi (.) Ct-1 + Wbi + Rbi)\n\n  - ft = f(Xt*(Wf^T) + Ht-1*Rf + Pf (.) Ct-1 + Wbf + Rbf)\n\n  - ct = g(Xt*(Wc^T) + Ht-1*Rc + Wbc + Rbc)\n\n  - Ct = ft (.) Ct-1 + it (.) ct\n\n  - ot = f(Xt*(Wo^T) + Ht-1*Ro + Po (.) Ct + Wbo + Rbo)\n\n  - Ht = ot (.) h(Ct)\n",
      "inputs": [
        {
          "description": "The input sequences packed (and potentially padded) into one 3-D tensor with the shape of `[seq_length, batch_size, input_size]`.",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "The weight tensor for the gates. Concatenation of `W[iofc]` and `WB[iofc]` (if bidirectional) along dimension 0. The tensor has shape `[num_directions, 4*hidden_size, input_size]`.",
          "name": "W",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "The recurrence weight tensor. Concatenation of `R[iofc]` and `RB[iofc]` (if bidirectional) along dimension 0. This tensor has shape `[num_directions, 4*hidden_size, hidden_size]`.",
          "name": "R",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "The bias tensor for input gate. Concatenation of `[Wb[iofc], Rb[iofc]]`, and `[WBb[iofc], RBb[iofc]]` (if bidirectional) along dimension 0. This tensor has shape `[num_directions, 8*hidden_size]`. Optional: If not specified - assumed to be 0.",
          "name": "bias",
          "optional": true,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "Optional tensor specifying lengths of the sequences in a batch. If not specified - assumed all sequences in the batch to have length `seq_length`. It has shape `[batch_size]`.",
          "name": "sequence_lens",
          "optional": true,
          "typeStr": "T1",
          "types": [
            "tensor(int32)"
          ]
        },
        {
          "description": "Optional initial value of the hidden. If not specified - assumed to be 0. It has shape `[num_directions, batch_size, hidden_size]`.",
          "name": "initial_h",
          "optional": true,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "Optional initial value of the cell. If not specified - assumed to be 0. It has shape `[num_directions, batch_size, hidden_size]`.",
          "name": "initial_c",
          "optional": true,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "The weight tensor for peepholes. Concatenation of `P[iof]` and `PB[iof]` (if bidirectional) along dimension 0. It has shape `[num_directions, 3*hidde_size]`. Optional: If not specified - assumed to be 0.",
          "name": "P",
          "optional": true,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 8,
      "max_output": 2,
      "min_input": 3,
      "min_output": 1,
      "outputs": [
        {
          "description": "A tensor that concats all the intermediate output values of the hidden. It has shape `[seq_length, num_directions, batch_size, hidden_size]`. It is optional if `output_sequence` is 0.",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "The last output value of the hidden. It has shape `[num_directions, batch_size, hidden_size]`.",
          "name": "Y_h",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(int32)"
          ],
          "description": "Constrain seq_lens to integer tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "op_type": "LeakyRelu",
    "schema": {
      "attributes": [
        {
          "description": "Coefficient of leakage",
          "name": "alpha",
          "required": false,
          "type": "float"
        }
      ],
      "doc": "LeakyRelu takes input data (Tensor<T>) and an argument alpha, and produces one\noutput data (Tensor<T>) where the function `f(x) = alpha * x for x < 0`,\n`f(x) = x for x >= 0`, is applied to the data tensor elementwise.\n",
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Less",
    "schema": {
      "attributes": [
        {
          "description": "If set, defines the broadcast dimensions.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Enable broadcasting",
          "name": "broadcast",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Returns the tensor resulted from performing the `less` logical operation\nelementwise on the input tensors `A` and `B`.\n\nIf broadcasting is enabled, the right-hand-side argument will be broadcasted\nto match the shape of left-hand-side argument. See the doc of `Add` for a\ndetailed description of the broadcasting rules.\n",
      "inputs": [
        {
          "description": "Left input tensor for the logical operator.",
          "name": "A",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "Right input tensor for the logical operator.",
          "name": "B",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result tensor.",
          "name": "C",
          "optional": false,
          "typeStr": "T1",
          "types": [
            "tensor(bool)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrains input to float tensors.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains output to boolean tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "op_type": "Log",
    "schema": {
      "doc": "Calculates the natural log of the given input tensor, element-wise. This\noperation can be done in an in-place fashion too, by providing the same input\nand output blobs.\n",
      "inputs": [
        {
          "description": "Input tensor",
          "name": "input",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The natural log of the input tensor computed element-wise",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "LogSoftmax",
    "schema": {
      "attributes": [
        {
          "description": "(int) default to 1; describes the axis of the inputs when coerced to 2D; defaults to one because the 0th axis most likely describes the batch_size",
          "name": "axis",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "The operator computes the logsoftmax normalized values for each layer in the batch\n of the given input. The input is a 2-D tensor (Tensor<float>) of size\n(batch_size x input_feature_dimensions). The output tensor has the same shape\nand contains the logsoftmax normalized values of the corresponding input.\n\nX does not need to explicitly be a 2D vector; rather, it will be\ncoerced into one. For an arbitrary n-dimensional tensor\nX \\in [a_0, a_1, ..., a_{k-1}, a_k, ..., a_{n-1}] and k is\nthe axis provided, then X will be coerced into a 2-dimensional tensor with\ndimensions [a_0 * ... * a_{k-1}, a_k * ... * a_{n-1}]. For the default\ncase where axis=1, this means the X tensor will be coerced into a 2D tensor\nof dimensions [a_0, a_1 * ... * a_{n-1}], where a_0 is often the batch size.\nIn this situation, we must have a_0 = N and a_1 * ... * a_{n-1} = D.\nEach of these dimensions must be matched correctly, or else the operator\nwill throw errors.\n",
      "inputs": [
        {
          "description": "The input tensor that's coerced into a 2D matrix of size (NxD) as described above.",
          "name": "input",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The softmax normalized output values with the same shape as input tensor.",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "LpNormalization",
    "schema": {
      "attributes": [
        {
          "description": "(int64, default -1) the axis on which to apply normalization, -1 mean last axis.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "(int64, default 2) the order of the normalization, only 1 or 2 are supported.",
          "name": "p",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Given a matrix, apply Lp-normalization along the provided axis.\n",
      "inputs": [
        {
          "description": "Input matrix",
          "name": "input",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Matrix after normalization",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "LpPool",
    "schema": {
      "attributes": [
        {
          "description": "auto_pad must be either SAME_UPPER, SAME_LOWER or VALID. Where SAME_UPPER or SAME_LOWER mean pad the input so that the ouput size match the input.In case of odd number add the extra padding at the end for SAME_UPPER and at the begining for SAME_LOWER. VALID mean no padding, therefore, read the pixel values from the pads attribute. DEPRECATION NOTE: auto_pad is only intended to support legacy uses, and for framework authors, one is explicitly encouraged to use explicit padding specified in the pads attribute.",
          "name": "auto_pad",
          "required": false,
          "type": "string"
        },
        {
          "description": "The size of the kernel along each axis.",
          "name": "kernel_shape",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "p value of the Lp norm used to pool over the input data, default is 2.0.",
          "name": "p",
          "required": false,
          "type": "float"
        },
        {
          "description": "Padding for lower and upper side along each axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the lower and upper part of the corresponding axis. So `pads` will have two values per axis, first value corresponding to the number of pixels added to the begining of the axis and the second value corresponding to the number of pixels add at the end of the axis.",
          "name": "pads",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "Stride along each axis.",
          "name": "strides",
          "required": false,
          "type": "list of ints"
        }
      ],
      "doc": "LpPool consumes an input tensor X and applies Lp pooling across the\n the tensor according to kernel sizes, stride sizes, and pad lengths.\n Lp pooling consisting of computing the Lp norm on all values of a subset \n of the input tensor according to the kernel size and downsampling the\n data into the output tensor Y for further processing.",
      "inputs": [
        {
          "description": "Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimension are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size.",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output data tensor from Lp pooling across the input tensor. Dimensions will vary based on various kernel, stride, and pad sizes.",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "MatMul",
    "schema": {
      "doc": "Matrix product that behaves like numpy.matmul: https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.matmul.html\n",
      "inputs": [
        {
          "description": "N-dimensional matrix A",
          "name": "A",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "N-dimensional matrix B",
          "name": "B",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Matrix multiply results from A * B",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "snippets": [
        {
          "code": "node = onnx.helper.make_node(\n    'MatMul',\n    inputs=['a', 'b'],\n    outputs=['c'],\n)\n\n# 2d\na = np.random.randn(3, 4).astype(np.float32)\nb = np.random.randn(4, 3).astype(np.float32)\nc = np.matmul(a, b)\nexpect(node, inputs=[a, b], outputs=[c],\n       name='test_matmul_2d')\n\n# 3d\na = np.random.randn(2, 3, 4).astype(np.float32)\nb = np.random.randn(2, 4, 3).astype(np.float32)\nc = np.matmul(a, b)\nexpect(node, inputs=[a, b], outputs=[c],\n       name='test_matmul_3d')\n\n# 4d\na = np.random.randn(1, 2, 3, 4).astype(np.float32)\nb = np.random.randn(1, 2, 4, 3).astype(np.float32)\nc = np.matmul(a, b)\nexpect(node, inputs=[a, b], outputs=[c],\n       name='test_matmul_4d')",
          "summary": "matmul"
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Max",
    "schema": {
      "doc": "Element-wise max of each of the input tensors. The first input tensor can be\nused in-place as the output tensor, in which case the max will be done in\nplace and results will be accumulated in input0. All inputs and outputs must\nhave the same shape and data type.\n",
      "inputs": [
        {
          "description": "First of the input tensors. Can be inplace.",
          "name": "data_0",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 2147483647,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor. Same dimension as inputs.",
          "name": "max",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "MaxPool",
    "schema": {
      "attributes": [
        {
          "description": "auto_pad must be either SAME_UPPER, SAME_LOWER or VALID. Where SAME_UPPER or SAME_LOWER mean pad the input so that the ouput size match the input.In case of odd number add the extra padding at the end for SAME_UPPER and at the begining for SAME_LOWER. VALID mean no padding. DEPRECATION NOTE: auto_pad is only intended to support legacy uses, and for framework authors, one is explicitly encouraged to use explicit padding specified in the pads attribute.",
          "name": "auto_pad",
          "required": false,
          "type": "string"
        },
        {
          "description": "The size of the kernel along each axis.",
          "name": "kernel_shape",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "Padding for lower and upper side along each axis, it can take any value greater than or equal to 0. The value represent the number of pixels added to the lower and upper part of the corresponding axis. So `pads` will have two values per axis, first value corresponding to the number of pixels added to the begining of the axis and the second value corresponding to the number of pixels add at the end of the axis. This attribute cannot be used simultaneously with auto_pad attribute.",
          "name": "pads",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "Stride along each axis.",
          "name": "strides",
          "required": false,
          "type": "list of ints"
        }
      ],
      "doc": "MaxPool consumes an input tensor X and applies max pooling across the\n the tensor according to kernel sizes, stride sizes, and pad lengths.\n max pooling consisting of computing the max on all values of a \n subset of the input tensor according to the kernel size and downsampling the\n data into the output tensor Y for further processing.",
      "inputs": [
        {
          "description": "Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data. For non image case, the dimension are in the form of (N x C x D1 x D2 ... Dn), where N is the batch size.",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output data tensor from average or max pooling across the input tensor. Dimensions will vary based on various kernel, stride, and pad sizes.",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "MaxRoiPool",
    "schema": {
      "attributes": [
        {
          "description": "ROI pool output shape (height, width).",
          "name": "pooled_shape",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "Multiplicative spatial scale factor to translate ROI coordinates from their input scale to the scale used when pooling.",
          "name": "spatial_scale",
          "required": false,
          "type": "float"
        }
      ],
      "doc": "ROI max pool consumes an input tensor X and region of interests (RoIs) to \n apply max pooling across each RoI, to produce output 4-D tensor of shape \n (num_rois, channels, pooled_shape[0], pooled_shape[1]).",
      "inputs": [
        {
          "description": "Input data tensor from the previous operator; dimensions for image case are (N x C x H x W), where N is the batch size, C is the number of channels, and H and W are the height and the width of the data.",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "RoIs (Regions of Interest) to pool over. Should be a 2-D tensor of shape (num_rois, 5) given as [[batch_id, x1, y1, x2, y2], ...].",
          "name": "rois",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "RoI pooled output 4-D tensor of shape (num_rois, channels, pooled_shape[0], pooled_shape[1]).",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Mean",
    "schema": {
      "doc": "Element-wise mean of each of the input tensors. The first input tensor can be\nused in-place as the output tensor, in which case the sum will be done in\nplace and results will be accumulated in input0. All inputs and outputs must\nhave the same shape and data type.\n",
      "inputs": [
        {
          "description": "First of the input tensors. Can be inplace.",
          "name": "data_0",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 2147483647,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor. Same dimension as inputs.",
          "name": "mean",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Min",
    "schema": {
      "doc": "Element-wise min of each of the input tensors. The first input tensor can be\nused in-place as the output tensor, in which case the max will be done in\nplace and results will be accumulated in input0. All inputs and outputs must\nhave the same shape and data type.\n",
      "inputs": [
        {
          "description": "First of the input tensors. Can be inplace.",
          "name": "data_0",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 2147483647,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor. Same dimension as inputs.",
          "name": "min",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Mul",
    "schema": {
      "attributes": [
        {
          "description": "If set, defines the broadcast dimensions. See doc for details.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Pass 1 to enable broadcasting",
          "name": "broadcast",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Performs element-wise binary multiplication (with limited broadcast support).\n\nIf necessary the right-hand-side argument will be broadcasted to match the\nshape of left-hand-side argument. When broadcasting is specified, the second\ntensor can either be of size 1 (a scalar value), or having its shape as a\ncontiguous subset of the first tensor's shape. The starting of the mutually\nequal shape is specified by the argument \"axis\", and if it is not set, suffix\nmatching is assumed. 1-dim expansion doesn't work yet.\n\nFor example, the following tensor shapes are supported (with broadcast=1):\n\n  shape(A) = (2, 3, 4, 5), shape(B) = (,), i.e. B is a scalar\n  shape(A) = (2, 3, 4, 5), shape(B) = (5,)\n  shape(A) = (2, 3, 4, 5), shape(B) = (4, 5)\n  shape(A) = (2, 3, 4, 5), shape(B) = (3, 4), with axis=1\n  shape(A) = (2, 3, 4, 5), shape(B) = (2), with axis=0\n\nAttribute `broadcast=1` needs to be passed to enable broadcasting.\n",
      "inputs": [
        {
          "description": "First operand, should share the type with the second operand.",
          "name": "A",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "Second operand. With broadcasting can be of smaller size than A. If broadcasting is disabled it should be of the same size.",
          "name": "B",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result, has same dimensions and type as A",
          "name": "C",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Neg",
    "schema": {
      "doc": "Neg takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where each element flipped sign, y = -x, is applied to\nthe tensor elementwise.\n",
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Not",
    "schema": {
      "doc": "Returns the negation of the input tensor element-wise.\n",
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(bool)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(bool)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains input/output to boolean tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Or",
    "schema": {
      "attributes": [
        {
          "description": "If set, defines the broadcast dimensions.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Enable broadcasting",
          "name": "broadcast",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Returns the tensor resulted from performing the `or` logical operation\nelementwise on the input tensors `A` and `B`.\n\nIf broadcasting is enabled, the right-hand-side argument will be broadcasted\nto match the shape of left-hand-side argument. See the doc of `Add` for a\ndetailed description of the broadcasting rules.\n",
      "inputs": [
        {
          "description": "Left input tensor for the logical operator.",
          "name": "A",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(bool)"
          ]
        },
        {
          "description": "Right input tensor for the logical operator.",
          "name": "B",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(bool)"
          ]
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result tensor.",
          "name": "C",
          "optional": false,
          "typeStr": "T1",
          "types": [
            "tensor(bool)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains input to boolean tensor.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains output to boolean tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "op_type": "PRelu",
    "schema": {
      "doc": "PRelu takes input data (Tensor<T>) and slope tensor as input, and produces one\noutput data (Tensor<T>) where the function `f(x) = slope * x for x < 0`,\n`f(x) = x for x >= 0`., is applied to the data tensor elementwise.\n\n",
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "Slope tensor. If `Slope` is of size 1, the value is sharedacross different channels",
          "name": "slope",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Pad",
    "schema": {
      "attributes": [
        {
          "description": "Three modes: constant(default), reflect, edge",
          "name": "mode",
          "required": false,
          "type": "string"
        },
        {
          "description": "List of integers indicate the padding sizes, paddings's length should be the double of input's dimension. The order should be axis_0_begin, axis_0_end, axis_1_begin, ..., axis_n_begin, axis_n_end, n is input's dimension.",
          "name": "paddings",
          "required": true,
          "type": "list of ints"
        },
        {
          "description": "One float, indicates the value to be filled, default is 0",
          "name": "value",
          "required": false,
          "type": "float"
        }
      ],
      "doc": "Given `data` tensor, paddings, mode, and value.\n\nExample:\n  Insert 0 paddings to the beginning of the second dimension.\n\n  data = [\n      [1.0, 1.2],\n      [2.3, 3.4],\n      [4.5, 5.7],\n  ]\n  paddings = [0, 0, 2, 0]\n\n  output = [\n      [\n          [0.0, 0.0, 1.0, 1.2],\n          [0.0, 0.0, 2.3, 3.4],\n          [0.0, 0.0, 4.5, 5.7],\n      ],\n  ]\n",
      "inputs": [
        {
          "description": "Input tensor.",
          "name": "data",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Tensor after padding.",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "snippets": [
        {
          "code": "node = onnx.helper.make_node(\n    'Pad',\n    inputs=['x'],\n    outputs=['y'],\n    mode='constant',\n    value=1.2,\n    paddings=[0, 0, 0, 0, 1, 2, 3, 4],\n)\nx = np.random.randn(1, 3, 4, 5).astype(np.float32)\ny = np.pad(\n    x,\n    pad_width=((0, 0), (0, 0), (1, 2), (3, 4)),\n    mode='constant',\n    constant_values=1.2,\n)\n\nexpect(node, inputs=[x], outputs=[y],\n       name='test_constant_pad')",
          "summary": "constant_pad"
        },
        {
          "code": "for mode in ['edge', 'reflect']:\n    node = onnx.helper.make_node(\n        'Pad',\n        inputs=['x'],\n        outputs=['y'],\n        mode=mode,\n        paddings=[0, 0, 0, 0, 1, 1, 1, 1]\n    )\n    x = np.random.randn(1, 3, 4, 5).astype(np.float32)\n    y = np.pad(\n        x,\n        pad_width=((0, 0), (0, 0), (1, 1), (1, 1)),\n        mode=mode,\n    )\n\n    expect(node, inputs=[x], outputs=[y],\n           name='test_{}_pad'.format(mode))",
          "summary": "reflection_and_edge_pad"
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Pow",
    "schema": {
      "doc": "Pow takes input data (Tensor<T>) and exponent Tensor, and\nproduces one output data (Tensor<T>) where the function `f(x) = x^exponent`,\nis applied to the data tensor elementwise.\n",
      "inputs": [
        {
          "description": "Input tensor of any shape, base of the exponent.",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "Input tensor of any shape broadcastable to X shape, the exponent component.",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor (same size as X)",
          "name": "Z",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "RNN",
    "schema": {
      "attributes": [
        {
          "description": "Optional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM.",
          "name": "activation_alpha",
          "required": false,
          "type": "list of floats"
        },
        {
          "description": "Optional scaling values used by some activation functions. The values are consumed in the order of activation functions, for example (f, g, h) in LSTM.",
          "name": "activation_beta",
          "required": false,
          "type": "list of floats"
        },
        {
          "description": "One (or two if bidirectional) activation function for input gate. The activation function must be one of the activation functions specified above. Optional: Default `tanh` if not specified.",
          "name": "activations",
          "required": false,
          "type": "list of strings"
        },
        {
          "description": "Cell clip threshold. Clipping bounds the elements of a tensor in the range of [-threshold, +threshold] and is applied to the input of activations. No clip if not specified.",
          "name": "clip",
          "required": false,
          "type": "float"
        },
        {
          "description": "Specify if the RNN is forward, reverse, or bidirectional. Must be one of forward (default), reverse, or bidirectional.",
          "name": "direction",
          "required": false,
          "type": "string"
        },
        {
          "description": "Number of neurons in the hidden layer",
          "name": "hidden_size",
          "required": false,
          "type": "int"
        },
        {
          "description": "The sequence output for the hidden is optional if 0. Default 0.",
          "name": "output_sequence",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Computes an one-layer simple RNN. This operator is usually supported\nvia some custom implementation such as CuDNN.\n\nNotations:\n\n`X` - input tensor\n\n`i` - input gate\n\n`t` - time step (t-1 means previous time step)\n\n`Wi` - W parameter weight matrix for input gate\n\n`Ri` - R recurrence weight matrix for input gate\n\n`Wbi` - W parameter bias vector for input gate\n\n`Rbi` - R parameter bias vector for input gate\n\n`WBi` - W parameter weight matrix for backward input gate\n\n`RBi` - R recurrence weight matrix for backward input gate\n\n`WBbi` - WR bias vectors for backward input gate\n\n`RBbi` - RR bias vectors for backward input gate\n\n`H` - Hidden state\n\n`num_directions` - 2 if direction == bidirectional else 1\n\nActivation functions:\n\n  relu(x)                - max(0, x)\n\n  tanh(x)                - (1 - e^{-2x})/(1 + e^{-2x})\n\n  sigmoid(x)             - 1/(1 + e^{-x})\n\n  (NOTE: Below are optional)\n\n  linear(x)              - alpha*x + beta\n\n  leakyRelu(x)           - x if x >= 0 else alpha * x\n\n  thresholdedRelu(x)     - x if x >= alpha else 0\n\n  pRelu(xi)              - xi if xi >= 0 else alpha[i]* xi over dim 0\n\n  scaledTanh(x)          - alpha*tanh(beta*x)\n\n  sigmoidHard(x)         - min(max(alpha*x + beta, 0), 1)\n\n  elu(x)                 - x if x >= 0 else alpha*(e^x - 1)\n\n  softsign(x)            - x/(1 + |x|)\n\n  softplus(x)            - log(1 + e^x)\n\n  parametricSoftplus(xi) - alpha[i]*log(1 + e^{beta[i]* xi}) over dim 0\n\nEquations (Default: f=tanh):\n\n  - Ht = f(Xt*(Wi^T) + Ht-1*Ri + Wbi + Rbi)\n",
      "inputs": [
        {
          "description": "The input sequences packed (and potentially padded) into one 3-D tensor with the shape of `[seq_length, batch_size, input_size]`.",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "The weight tensor for input gate. Concatenation of `Wi` and `WBi` (if bidirectional). The tensor has shape `[num_directions, hidden_size, input_size]`.",
          "name": "W",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "The recurrence weight tensor. Concatenation of `Ri` and `RBi` (if bidirectional). The tensor has shape `[num_directions, hidden_size, hidden_size]`.",
          "name": "R",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "The bias tensor for input gate. Concatenation of `[Wbi, Rbi]` and `[WBbi, RBbi]` (if bidirectional). The tensor has shape `[num_directions, 2*hidden_size]`. Optional: If not specified - assumed to be 0.",
          "name": "bias",
          "optional": true,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "Optional tensor specifying lengths of the sequences in a batch. If not specified - assumed all sequences in the batch to have length `seq_length`. It has shape `[batch_size]`.",
          "name": "sequence_lens",
          "optional": true,
          "typeStr": "T1",
          "types": [
            "tensor(int32)"
          ]
        },
        {
          "description": "Optional initial value of the hidden. If not specified - assumed to be 0. It has shape `[num_directions, batch_size, hidden_size]`.",
          "name": "initial_h",
          "optional": true,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 6,
      "max_output": 2,
      "min_input": 3,
      "min_output": 1,
      "outputs": [
        {
          "description": "A tensor that concats all the intermediate output values of the hidden. It has shape `[seq_length, num_directions, batch_size, hidden_size]`. It is optional if `output_sequence` is 0.",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "The last output value of the hidden. It has shape `[num_directions, batch_size, hidden_size]`.",
          "name": "Y_h",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(int32)"
          ],
          "description": "Constrain seq_lens to integer tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "op_type": "RandomNormal",
    "schema": {
      "attributes": [
        {
          "description": "The data type for the elements of the output tensor.",
          "name": "dtype",
          "required": false,
          "type": "int"
        },
        {
          "description": "The mean of the normal distribution.",
          "name": "mean",
          "required": false,
          "type": "float"
        },
        {
          "description": "The standard deviation of the normal distribution.",
          "name": "scale",
          "required": false,
          "type": "float"
        },
        {
          "description": "(Optional) Seed to the random generator, if not specified we will auto generate one.",
          "name": "seed",
          "required": false,
          "type": "float"
        },
        {
          "description": "The shape of the output tensor.",
          "name": "shape",
          "required": false,
          "type": "list of ints"
        }
      ],
      "doc": "Generate a tensor with random values drawn from a normal distribution. The shape\nof the tensor is specified by the `shape` argument and the parameter of the normal distribution\nspecified by `mean` and `scale`.\n\nThe data type is specified by the 'dtype' argument. The 'dtype' argument must\nbe one of the data types specified in the 'DataType' enum field in the\nTensorProto message.\n",
      "max_input": 0,
      "max_output": 1,
      "min_input": 0,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor of random values drawn from normal distribution",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "RandomNormalLike",
    "schema": {
      "attributes": [
        {
          "description": "(Optional) The data type for the elements of the output tensor, if not specified, we will usethe data type of the input tensor.",
          "name": "dtype",
          "required": false,
          "type": "int"
        },
        {
          "description": "The mean of the normal distribution.",
          "name": "mean",
          "required": false,
          "type": "float"
        },
        {
          "description": "The standard deviation of the normal distribution.",
          "name": "scale",
          "required": false,
          "type": "float"
        },
        {
          "description": "(Optional) Seed to the random generator, if not specified we will auto generate one.",
          "name": "seed",
          "required": false,
          "type": "float"
        }
      ],
      "doc": "Generate a tensor with random values drawn from a normal distribution. The shape\nof the tensor is computed from the input argument and the parameter of the normal distribution\nspecified by `mean` and `scale`.\n\nThe data type is specified by the 'dtype' argument. The 'dtype' argument must\nbe one of the data types specified in the 'DataType' enum field in the\nTensorProto message.\n",
      "inputs": [
        {
          "description": "Input tensor to provide shape information.",
          "name": "input",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor of random values drawn from normal distribution",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "RandomUniform",
    "schema": {
      "attributes": [
        {
          "description": "The data type for the elements of the output tensor.",
          "name": "dtype",
          "required": false,
          "type": "int"
        },
        {
          "description": "Upper boundary of the output values.",
          "name": "high",
          "required": false,
          "type": "float"
        },
        {
          "description": "Lower boundary of the output values.",
          "name": "low",
          "required": false,
          "type": "float"
        },
        {
          "description": "(Optional) Seed to the random generator, if not specified we will auto generate one.",
          "name": "seed",
          "required": false,
          "type": "float"
        },
        {
          "description": "The shape of the output tensor.",
          "name": "shape",
          "required": false,
          "type": "list of ints"
        }
      ],
      "doc": "Generate a tensor with random values drawn from a uniform distribution. The shape\nof the tensor is specified by the `shape` argument and the range by `low` and `high`.\n\nThe data type is specified by the 'dtype' argument. The 'dtype' argument must\nbe one of the data types specified in the 'DataType' enum field in the\nTensorProto message.\n",
      "max_input": 0,
      "max_output": 1,
      "min_input": 0,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor of random values drawn from uniform distribution",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "RandomUniformLike",
    "schema": {
      "attributes": [
        {
          "description": "(Optional) The data type for the elements of the output tensor, if not specified, we will usethe data type of the input tensor.",
          "name": "dtype",
          "required": false,
          "type": "int"
        },
        {
          "description": "Upper boundary of the output values.",
          "name": "high",
          "required": false,
          "type": "float"
        },
        {
          "description": "Lower boundary of the output values.",
          "name": "low",
          "required": false,
          "type": "float"
        },
        {
          "description": "(Optional) Seed to the random generator, if not specified we will auto generate one.",
          "name": "seed",
          "required": false,
          "type": "float"
        }
      ],
      "doc": "Generate a tensor with random values drawn from a uniform distribution. The shape\nof the tensor is computed from the input argument and the range by `low` and `high`.\n\nThe data type is specified by the 'dtype' argument. The 'dtype' argument must\nbe one of the data types specified in the 'DataType' enum field in the\nTensorProto message.\n",
      "inputs": [
        {
          "description": "Input tensor to provide shape information.",
          "name": "input",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor of random values drawn from uniform distribution",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Reciprocal",
    "schema": {
      "doc": "Reciprocal takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the reciprocal is, y = 1/x, is applied to\nthe tensor elementwise.\n",
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "ReduceL1",
    "schema": {
      "attributes": [
        {
          "description": "A list of integers, along which to reduce.",
          "name": "axes",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "Keep the reduced dimension or not, default 1 mean keep reduced dimension.",
          "name": "keepdims",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Computes the L1 norm of the input tensor's element along the provided axes. The resulted\ntensor has the same rank as the input if keepdims equal 1. If keepdims equal 0, then \nthe resulted tensor have the reduced dimension pruned.\n\nThe above behavior is similar to numpy, with the exception that numpy default keepdims to\nFalse instead of True.",
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reduced output tensor.",
          "name": "reduced",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "ReduceL2",
    "schema": {
      "attributes": [
        {
          "description": "A list of integers, along which to reduce.",
          "name": "axes",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "Keep the reduced dimension or not, default 1 mean keep reduced dimension.",
          "name": "keepdims",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Computes the L2 norm of the input tensor's element along the provided axes. The resulted\ntensor has the same rank as the input if keepdims equal 1. If keepdims equal 0, then \nthe resulted tensor have the reduced dimension pruned.\n\nThe above behavior is similar to numpy, with the exception that numpy default keepdims to\nFalse instead of True.",
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reduced output tensor.",
          "name": "reduced",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "ReduceLogSum",
    "schema": {
      "attributes": [
        {
          "description": "A list of integers, along which to reduce.",
          "name": "axes",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "Keep the reduced dimension or not, default 1 mean keep reduced dimension.",
          "name": "keepdims",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Computes the log sum of the input tensor's element along the provided axes. The resulted\ntensor has the same rank as the input if keepdims equal 1. If keepdims equal 0, then \nthe resulted tensor have the reduced dimension pruned.\n\nThe above behavior is similar to numpy, with the exception that numpy default keepdims to\nFalse instead of True.",
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reduced output tensor.",
          "name": "reduced",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "ReduceLogSumExp",
    "schema": {
      "attributes": [
        {
          "description": "A list of integers, along which to reduce.",
          "name": "axes",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "Keep the reduced dimension or not, default 1 mean keep reduced dimension.",
          "name": "keepdims",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Computes the log sum exponent of the input tensor's element along the provided axes. The resulted\ntensor has the same rank as the input if keepdims equal 1. If keepdims equal 0, then \nthe resulted tensor have the reduced dimension pruned.\n\nThe above behavior is similar to numpy, with the exception that numpy default keepdims to\nFalse instead of True.",
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reduced output tensor.",
          "name": "reduced",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "ReduceMax",
    "schema": {
      "attributes": [
        {
          "description": "A list of integers, along which to reduce.",
          "name": "axes",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "Keep the reduced dimension or not, default 1 mean keep reduced dimension.",
          "name": "keepdims",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Computes the max of the input tensor's element along the provided axes. The resulted\ntensor has the same rank as the input if keepdims equal 1. If keepdims equal 0, then \nthe resulted tensor have the reduced dimension pruned.\n\nThe above behavior is similar to numpy, with the exception that numpy default keepdims to\nFalse instead of True.",
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reduced output tensor.",
          "name": "reduced",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "ReduceMean",
    "schema": {
      "attributes": [
        {
          "description": "A list of integers, along which to reduce.",
          "name": "axes",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "Keep the reduced dimension or not, default 1 mean keep reduced dimension.",
          "name": "keepdims",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Computes the mean of the input tensor's element along the provided axes. The resulted\ntensor has the same rank as the input if keepdims equal 1. If keepdims equal 0, then \nthe resulted tensor have the reduced dimension pruned.\n\nThe above behavior is similar to numpy, with the exception that numpy default keepdims to\nFalse instead of True.",
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reduced output tensor.",
          "name": "reduced",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "ReduceMin",
    "schema": {
      "attributes": [
        {
          "description": "A list of integers, along which to reduce.",
          "name": "axes",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "Keep the reduced dimension or not, default 1 mean keep reduced dimension.",
          "name": "keepdims",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Computes the min of the input tensor's element along the provided axes. The resulted\ntensor has the same rank as the input if keepdims equal 1. If keepdims equal 0, then \nthe resulted tensor have the reduced dimension pruned.\n\nThe above behavior is similar to numpy, with the exception that numpy default keepdims to\nFalse instead of True.",
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reduced output tensor.",
          "name": "reduced",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "ReduceProd",
    "schema": {
      "attributes": [
        {
          "description": "A list of integers, along which to reduce.",
          "name": "axes",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "Keep the reduced dimension or not, default 1 mean keep reduced dimension.",
          "name": "keepdims",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Computes the product of the input tensor's element along the provided axes. The resulted\ntensor has the same rank as the input if keepdims equal 1. If keepdims equal 0, then \nthe resulted tensor have the reduced dimension pruned.\n\nThe above behavior is similar to numpy, with the exception that numpy default keepdims to\nFalse instead of True.",
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reduced output tensor.",
          "name": "reduced",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "ReduceSum",
    "schema": {
      "attributes": [
        {
          "description": "A list of integers, along which to reduce.",
          "name": "axes",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "Keep the reduced dimension or not, default 1 mean keep reduced dimension.",
          "name": "keepdims",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Computes the sum of the input tensor's element along the provided axes. The resulted\ntensor has the same rank as the input if keepdims equal 1. If keepdims equal 0, then \nthe resulted tensor have the reduced dimension pruned.\n\nThe above behavior is similar to numpy, with the exception that numpy default keepdims to\nFalse instead of True.",
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reduced output tensor.",
          "name": "reduced",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "ReduceSumSquare",
    "schema": {
      "attributes": [
        {
          "description": "A list of integers, along which to reduce.",
          "name": "axes",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "Keep the reduced dimension or not, default 1 mean keep reduced dimension.",
          "name": "keepdims",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Computes the sum square of the input tensor's element along the provided axes. The resulted\ntensor has the same rank as the input if keepdims equal 1. If keepdims equal 0, then \nthe resulted tensor have the reduced dimension pruned.\n\nThe above behavior is similar to numpy, with the exception that numpy default keepdims to\nFalse instead of True.",
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reduced output tensor.",
          "name": "reduced",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Relu",
    "schema": {
      "doc": "Relu takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the rectified linear function, y = max(0, x), is applied to\nthe tensor elementwise.\n",
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "snippets": [
        {
          "code": "node = onnx.helper.make_node(\n    'Relu',\n    inputs=['x'],\n    outputs=['y'],\n)\nx = np.random.randn(3, 4, 5).astype(np.float32)\ny = np.clip(x, 0, np.inf)\n\nexpect(node, inputs=[x], outputs=[y],\n       name='test_relu')",
          "summary": "relu"
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Reshape",
    "schema": {
      "attributes": [
        {
          "description": "New shape",
          "name": "shape",
          "required": false,
          "type": "list of ints"
        }
      ],
      "doc": "Reshape the input tensor similar to numpy.reshape.\n\nIt takes a tensor as input and an argument `shape`. It outputs the reshaped tensor.\n\nAt most one dimension of the new shape can be -1. In this case, the value is\ninferred from the size of the tensor and the remaining dimensions. A dimension\ncould also be 0, in which case the actual dimension value is going to be copied\nfrom the shape argument.",
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reshaped data.",
          "name": "reshaped",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Selu",
    "schema": {
      "attributes": [
        {
          "description": "Coefficient of SELU default to 1.6732.",
          "name": "alpha",
          "required": false,
          "type": "float"
        },
        {
          "description": "Coefficient of SELU default to 1.0507.",
          "name": "gamma",
          "required": false,
          "type": "float"
        }
      ],
      "doc": "Selu takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the scaled exponential linear unit function,\n`y = gamma * (alpha * e^x - alpha) for x <= 0`, `y = gamma * x for x > 0`,\nis applied to the tensor elementwise.\n",
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Sigmoid",
    "schema": {
      "doc": "Sigmoid takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the sigmoid function, y = 1 / (1 + exp(-x)), is applied to the\ntensor elementwise.\n",
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Slice",
    "schema": {
      "attributes": [
        {
          "description": "Axes that `starts` and `ends` apply to. It's optional. If not present, will be treated as [0, 1, ..., len(`starts`) - 1].",
          "name": "axes",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "Ending indices (exclusive) of corresponding axis in axes`",
          "name": "ends",
          "required": true,
          "type": "list of ints"
        },
        {
          "description": "Starting indices of corresponding axis in `axes`",
          "name": "starts",
          "required": true,
          "type": "list of ints"
        }
      ],
      "doc": "Produces a slice of the input tensor along multiple axes. Similar to numpy:\nhttps://docs.scipy.org/doc/numpy/reference/arrays.indexing.html\n\nSlices uses `axes`, `starts` and `ends` attributes to specify the start and end\ndimension for each axis in the list of axes, it uses this information to\nslice the input `data` tensor. If a negative value is passed for any of the\nstart or end indices, it represent number of elements before the end of that\ndimension.\n\nExample 1:\n\n  data = [\n      [1, 2, 3, 4],\n      [5, 6, 7, 8],\n  ]\n  axes = [0, 1]\n  starts = [1, 0]\n  ends = [2, 3]\n\n  result = [\n      [5, 6, 7],\n  ]\n\n\nExample 2:\n\n  data = [\n      [1, 2, 3, 4],\n      [5, 6, 7, 8],\n  ]\n  starts = [0]\n  ends = [-1]\n\n  result = [\n      [1, 2, 3, 4],\n  ]\n\n",
      "inputs": [
        {
          "description": "Tensor of data to extract slices from.",
          "name": "data",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Sliced data tensor.",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "snippets": [
        {
          "code": "node = onnx.helper.make_node(\n    'Slice',\n    inputs=['x'],\n    outputs=['y'],\n    axes=[0, 1],\n    starts=[0, 0],\n    ends=[3, 10],\n)\n\nx = np.random.randn(20, 10, 5).astype(np.float32)\ny = x[0:3, 0:10]\n\nexpect(node, inputs=[x], outputs=[y],\n       name='test_slice')",
          "summary": "slice"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Slice',\n    inputs=['x'],\n    outputs=['y'],\n    starts=[0, 0, 3],\n    ends=[20, 10, 4],\n)\n\nx = np.random.randn(20, 10, 5).astype(np.float32)\ny = x[:, :, 3:4]\n\nexpect(node, inputs=[x], outputs=[y],\n       name='test_default_axes')",
          "summary": "slice_default_axes"
        },
        {
          "code": "node = onnx.helper.make_node(\n    'Slice',\n    inputs=['x'],\n    outputs=['y'],\n    axes=[1],\n    starts=[0],\n    ends=[-1],\n)\n\nx = np.random.randn(20, 10, 5).astype(np.float32)\ny = x[:, 0:-1]\n\nexpect(node, inputs=[x], outputs=[y],\n       name='test_slice_neg')",
          "summary": "slice_neg"
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Softmax",
    "schema": {
      "attributes": [
        {
          "description": "(int) default to 1; describes the axis of the inputs when coerced to 2D; defaults to one because the 0th axis most likely describes the batch_size",
          "name": "axis",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "The operator computes the softmax normalized values for each layer in the batch\n of the given input. The input is a 2-D tensor (Tensor<float>) of size\n(batch_size x input_feature_dimensions). The output tensor has the same shape\nand contains the softmax normalized values of the corresponding input.\n\nX does not need to explicitly be a 2D vector; rather, it will be\ncoerced into one. For an arbitrary n-dimensional tensor\nX \\in [a_0, a_1, ..., a_{k-1}, a_k, ..., a_{n-1}] and k is\nthe axis provided, then X will be coerced into a 2-dimensional tensor with\ndimensions [a_0 * ... * a_{k-1}, a_k * ... * a_{n-1}]. For the default\ncase where axis=1, this means the X tensor will be coerced into a 2D tensor\nof dimensions [a_0, a_1 * ... * a_{n-1}], where a_0 is often the batch size.\nIn this situation, we must have a_0 = N and a_1 * ... * a_{n-1} = D.\nEach of these dimensions must be matched correctly, or else the operator\nwill throw errors.\n",
      "inputs": [
        {
          "description": "The input tensor that's coerced into a 2D matrix of size (NxD) as described above.",
          "name": "input",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The softmax normalized output values with the same shape as input tensor.",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Softplus",
    "schema": {
      "doc": "Softplus takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the softplus function, y = ln(exp(x) + 1), is applied to\nthe tensor elementwise.\n",
      "inputs": [
        {
          "description": "1D input tensor",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "1D input tensor",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Softsign",
    "schema": {
      "doc": "Calculates the softsign (x/1+|x|) of the given input tensor element-wise. This\noperation can be done in an in-place fashion too, by providing the same input\nand output blobs.\n",
      "inputs": [
        {
          "description": "1-D input tensor",
          "name": "input",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The softsign (x/1+|x|) values of the input tensor computed element-wise",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "SpaceToDepth",
    "schema": {
      "attributes": [
        {
          "description": "Blocks of [blocksize, blocksize] are moved.",
          "name": "blocksize",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "SpaceToDepth rearranges blocks of spatial data into depth. More specifically, \nthis op outputs a copy of the input tensor where values from the height and width dimensions \nare moved to the depth dimension.\n",
      "inputs": [
        {
          "description": "Input tensor of [N,C,H,W], where N is the batch axis, C is the channel or depth, H is the height and W is the width.",
          "name": "input",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor of [N, C * blocksize * blocksize, H/blocksize, W/blocksize].",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Split",
    "schema": {
      "attributes": [
        {
          "description": "Which axis to split on",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "length of each output",
          "name": "split",
          "required": false,
          "type": "list of ints"
        }
      ],
      "doc": "Split a tensor into a list of tensors, along the specified\n'axis'. The lengths of the split can be specified using argument 'axis' or\noptional second input blob to the operator. Otherwise, the tensor is split\nto equal sized parts.\n",
      "inputs": [
        {
          "description": "The tensor to split",
          "name": "input",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "Optional list of output lengths (see also arg 'split')",
          "name": "split",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 2,
      "max_output": 2147483647,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "One or more outputs forming list of tensors after splitting",
          "name": "outputs...",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Sqrt",
    "schema": {
      "doc": "Square root takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the square root is, y = x^0.5, is applied to\nthe tensor elementwise. If x is negative, then it will return NaN.\n",
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Squeeze",
    "schema": {
      "attributes": [
        {
          "description": "List of positive integers, indicate the dimensions to squeeze.",
          "name": "axes",
          "required": true,
          "type": "list of ints"
        }
      ],
      "doc": "Remove single-dimensional entries from the shape of a tensor.\nTakes a  parameter `axes` with a list of axes to squeeze.\n",
      "inputs": [
        {
          "description": "Tensors with at least max(dims) dimensions.",
          "name": "data",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Reshaped tensor with same data as input.",
          "name": "squeezed",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Sub",
    "schema": {
      "attributes": [
        {
          "description": "If set, defines the broadcast dimensions. See doc for details.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Pass 1 to enable broadcasting",
          "name": "broadcast",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Performs element-wise binary subtraction (with limited broadcast support).\n\nIf necessary the right-hand-side argument will be broadcasted to match the\nshape of left-hand-side argument. When broadcasting is specified, the second\ntensor can either be of size 1 (a scalar value), or having its shape as a\ncontiguous subset of the first tensor's shape. The starting of the mutually\nequal shape is specified by the argument \"axis\", and if it is not set, suffix\nmatching is assumed. 1-dim expansion doesn't work yet.\n\nFor example, the following tensor shapes are supported (with broadcast=1):\n\n  shape(A) = (2, 3, 4, 5), shape(B) = (,), i.e. B is a scalar\n  shape(A) = (2, 3, 4, 5), shape(B) = (5,)\n  shape(A) = (2, 3, 4, 5), shape(B) = (4, 5)\n  shape(A) = (2, 3, 4, 5), shape(B) = (3, 4), with axis=1\n  shape(A) = (2, 3, 4, 5), shape(B) = (2), with axis=0\n\nAttribute `broadcast=1` needs to be passed to enable broadcasting.\n",
      "inputs": [
        {
          "description": "First operand, should share the type with the second operand.",
          "name": "A",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "Second operand. With broadcasting can be of smaller size than A. If broadcasting is disabled it should be of the same size.",
          "name": "B",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result, has same dimensions and type as A",
          "name": "C",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Sum",
    "schema": {
      "doc": "Element-wise sum of each of the input tensors. The first input tensor can be\nused in-place as the output tensor, in which case the sum will be done in\nplace and results will be accumulated in input0. All inputs and outputs must\nhave the same shape and data type.\n",
      "inputs": [
        {
          "description": "First of the input tensors. Can be inplace.",
          "name": "data_0",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 2147483647,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor. Same dimension as inputs.",
          "name": "sum",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Tanh",
    "schema": {
      "doc": "Calculates the hyperbolic tangent of the given input tensor element-wise. This\noperation can be done in an in-place fashion too, by providing the same input\nand output blobs.\n",
      "inputs": [
        {
          "description": "1-D input tensor",
          "name": "input",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The hyperbolic tangent values of the input tensor computed element-wise",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Tile",
    "schema": {
      "doc": "Repeat the elements of a tensor along an axis.",
      "inputs": [
        {
          "description": "Input tensor of any shape.",
          "name": "input",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "Number of repeated copies to make of the input tensor.",
          "name": "tiles",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "Axis along which to repeat.",
          "name": "axis",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 3,
      "max_output": 1,
      "min_input": 3,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor of same shape and type as input.",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Transpose",
    "schema": {
      "attributes": [
        {
          "description": "A list of integers. By default, reverse the dimensions, otherwise permute the axes according to the values given.",
          "name": "perm",
          "required": false,
          "type": "list of ints"
        }
      ],
      "doc": "Transpose the input tensor similar to numpy.transpose. For example, when\naxes=(1, 0, 2), given an input tensor of shape (1, 2, 3), the output shape\nwill be (2, 1, 3).\n",
      "inputs": [
        {
          "description": "An input tensor.",
          "name": "data",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Transposed output.",
          "name": "transposed",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Xor",
    "schema": {
      "attributes": [
        {
          "description": "If set, defines the broadcast dimensions.",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "Enable broadcasting",
          "name": "broadcast",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Returns the tensor resulted from performing the `xor` logical operation\nelementwise on the input tensors `A` and `B`.\n\nIf broadcasting is enabled, the right-hand-side argument will be broadcasted\nto match the shape of left-hand-side argument. See the doc of `Add` for a\ndetailed description of the broadcasting rules.\n",
      "inputs": [
        {
          "description": "Left input tensor for the logical operator.",
          "name": "A",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(bool)"
          ]
        },
        {
          "description": "Right input tensor for the logical operator.",
          "name": "B",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(bool)"
          ]
        }
      ],
      "max_input": 2,
      "max_output": 1,
      "min_input": 2,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result tensor.",
          "name": "C",
          "optional": false,
          "typeStr": "T1",
          "types": [
            "tensor(bool)"
          ]
        }
      ],
      "support_level": "common",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains input to boolean tensor.",
          "type_param_str": "T"
        },
        {
          "allowed_type_strs": [
            "tensor(bool)"
          ],
          "description": "Constrains output to boolean tensor.",
          "type_param_str": "T1"
        }
      ]
    }
  },
  {
    "op_type": "ATen",
    "schema": {
      "doc": "Experimental allowing ATen operations to be accessed directly from Caffe2\nto allow for quick prototyping when ONNX is missing standard versions of\nand op",
      "max_input": 2147483647,
      "max_output": 2147483647,
      "min_input": 0,
      "min_output": 0,
      "support_level": "experimental"
    }
  },
  {
    "op_type": "Affine",
    "schema": {
      "attributes": [
        {
          "description": "Value of alpha",
          "name": "alpha",
          "required": false,
          "type": "float"
        },
        {
          "description": "Value of beta",
          "name": "beta",
          "required": false,
          "type": "float"
        }
      ],
      "doc": "Affine takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the affine function, y = alpha * x + beta,\nis applied to the tensor elementwise.\n",
      "inputs": [
        {
          "description": "1D input tensor",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "1D output tensor",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "ConstantFill",
    "schema": {
      "attributes": [
        {
          "description": "The data type for the elements of the output tensor.Strictly must be one of the types from DataType enum in TensorProto.",
          "name": "dtype",
          "required": false,
          "type": "int"
        },
        {
          "description": "The additional dimensions appended at the end of the shape indicatedby the input blob.Cannot set the extra_shape argument when there is no input blob.",
          "name": "extra_shape",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "1D tensor containing the desired output shape.  First input must be in CPU context.",
          "name": "input_as_shape",
          "required": false,
          "type": "int"
        },
        {
          "description": "The shape of the output tensor.Cannot set the shape argument and pass in an input at the same time.",
          "name": "shape",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "The value for the elements of the output tensor.",
          "name": "value",
          "required": false,
          "type": "float"
        }
      ],
      "doc": "The operator fills the elements of the output tensor with a constant value\nspecified by the 'value' attribute.\n\nThe data type is specified by the 'dtype' attribute. The 'dtype' attribute must\nbe one of the data types specified in the 'DataType' enum field in the\nTensorProto message. If the 'dtype' attribute is not provided, the data type of\n'value' is used.\n\nThe output tensor shape is specified by the 'shape' attribute. If the number of\ninput is 1, the shape will be identical to that of the input at run time with\noptional additional dimensions appended at the end as specified by 'extra_shape'\nattribute. In that case the 'shape' attribute should not be set.\n\nIf input_as_shape is set to true, then the input should be a 1D tensor\ncontaining the desired output shape (the dimensions specified in extra_shape\nwill also be appended)\n\nNOTE: Currently, it supports data type of float, int32, int64, and bool.\n",
      "inputs": [
        {
          "description": "Input tensor (optional) to provide shape information.",
          "name": "input",
          "optional": true,
          "typeStr": "T1",
          "types": [
            "tensor(bool)",
            "tensor(float)",
            "tensor(int32)",
            "tensor(int64)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 0,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor of constant values specified by 'value'argument and its type is specified by the 'dtype' argument",
          "name": "output",
          "optional": false,
          "typeStr": "T2",
          "types": [
            "tensor(bool)",
            "tensor(float)",
            "tensor(int32)",
            "tensor(int64)"
          ]
        }
      ],
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(bool)"
          ],
          "description": "Constrain input types to float, int32, int64, bool tensors.",
          "type_param_str": "T1"
        },
        {
          "allowed_type_strs": [
            "tensor(float)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(bool)"
          ],
          "description": "Constrain output types to float, int32, int64, bool tensors.",
          "type_param_str": "T2"
        }
      ]
    }
  },
  {
    "op_type": "Crop",
    "schema": {
      "attributes": [
        {
          "description": "A 1-D values of (leftBorder, topBorder, rightBorder, bottomBorder).",
          "name": "border",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "A 1-D values of (height, width).",
          "name": "scale",
          "required": false,
          "type": "list of ints"
        }
      ],
      "doc": "Crop and image to the specified spatial dimensions. If scale is given, \nthen optionally start the crop offset by the left/top border amounts. \nIf scale is not provided, crop the borders as provided.",
      "inputs": [
        {
          "description": "Input tensor of shape [N,C,H,W]",
          "name": "input",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result, has same type as input, with H and W dimensions reduced.",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Embedding",
    "schema": {
      "attributes": [
        {
          "description": "Size of the input vocabulary.",
          "name": "input_dim",
          "required": false,
          "type": "int"
        },
        {
          "description": "Dimension of the embedding output vectors.",
          "name": "output_dim",
          "required": false,
          "type": "int"
        },
        {
          "description": "2-D tensor of weights [O,I].",
          "name": "weights",
          "required": false,
          "type": "tensor"
        }
      ],
      "doc": "Turns positive integers (indexes) into dense vectors of fixed size.",
      "inputs": [
        {
          "description": "1-D tensor of integers representing indices in the embedding dictionary with length [N] and values [0, input_dim -1]",
          "name": "input",
          "optional": false,
          "typeStr": "tensor(int64)",
          "types": [
            "tensor(int64)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor of computed features [N, O].",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "FC",
    "schema": {
      "attributes": [
        {
          "description": "(int32_t) default to 1; describes the axis of the inputs; defaults to one because the 0th axis most likely describes the batch_size",
          "name": "axis",
          "required": false,
          "type": "int"
        },
        {
          "description": "(int32_t) default to 1; describes the axis of the weights; defaults to one because the 0th axis most likely describes the batch_size",
          "name": "axis_w",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Computes the result of passing an input vector X into a fully\nconnected layer with 2D weight matrix W and 1D bias vector b. That is,\nthe layer computes Y = X * W^T + b, where X has size (M x K),\nW has size (N x K), b has size (N), and Y has size (M x N),\nwhere M is often the batch size.\nNOTE: X does not need to explicitly be a 2D vector; rather, it will be\ncoerced into one. For an arbitrary n-dimensional tensor\nX \\in [a_0, a_1, ...,a_{k-1}, a_k, ..., a_{n-1}] where a_i \\in N+ and k is\nthe axis provided, then X will be coerced into a 2-dimensional tensor with\ndimensions [a_0 * ... * a_{k-1}, a_k * ... * a_{n-1}]. For the default\ncase where axis=1, this means the X tensor will be coerced into a 2D tensor\nof dimensions [a_0, a_1 * ... * a_{n-1}], where a_0 is often the batch size.\nIn this situation, we must have a_0 = M and a_1 * ... * a_{n-1} = K.\nLastly, even though b is a 1D vector of size N, it is copied/resized to\nbe size (M x N) implicitly and added to each vector in the batch.\nEach of these dimensions must be matched correctly, or else the operator\nwill throw errors.\n",
      "inputs": [
        {
          "description": "input tensor that's coerced into a 2D matrix of size (MxK) as described above",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "2D blob of size (KxN) containing fully connected weight matrix",
          "name": "W",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "1D blob containing bias vector",
          "name": "bias",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 3,
      "max_output": 1,
      "min_input": 3,
      "min_output": 1,
      "outputs": [
        {
          "description": "2D output tensor",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "GRUUnit",
    "schema": {
      "attributes": [
        {
          "description": "Bool to determine if hidden state is zeroes or passed along for timesteps past the given sequence_length.",
          "name": "drop_states",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "GRUUnit computes the activations of a standard GRU,\nin a sequence-length aware fashion.\nConcretely, given the (fused) inputs X (TxNxD), the previous hidden\nstate (NxD), and the sequence lengths (N), computes the GRU\nactivations, avoiding computation if the input is invalid (as in, the\nvalue at X[t][n] >= seqLengths[n].\n",
      "inputs": [
        {
          "description": "The previous GRU hidden state.",
          "name": "hidden_prev",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "Unactivated gate outputs from forget, update, and output gates, pre-activation.",
          "name": "gates",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "Array of sequence lengths.  len(seq_lengths) should equal batch size N.",
          "name": "seq_lengths",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        },
        {
          "description": "The timestep for this operation.",
          "name": "t",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 4,
      "max_output": 1,
      "min_input": 4,
      "min_output": 1,
      "outputs": [
        {
          "description": "The new GRU hidden state calculated by this op.",
          "name": "hidden",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "GivenTensorFill",
    "schema": {
      "attributes": [
        {
          "description": "",
          "name": "extra_shape",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "",
          "name": "input_as_shape",
          "required": false,
          "type": "int"
        },
        {
          "description": "",
          "name": "shape",
          "required": false,
          "type": "list of ints"
        },
        {
          "description": "",
          "name": "values",
          "required": false,
          "type": "list of floats"
        }
      ],
      "inputs": [
        {
          "description": "The shape of filled tensor",
          "name": "shape",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 0,
      "min_output": 1,
      "outputs": [
        {
          "description": "The filled tensor",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Identity",
    "schema": {
      "doc": "Identity operator",
      "inputs": [
        {
          "description": "Input tensor",
          "name": "input",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Tensor to copy input into. Can be in-place",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "ImageScaler",
    "schema": {
      "attributes": [
        {
          "description": "Bias applied to each channel, same size as C.",
          "name": "bias",
          "required": false,
          "type": "list of floats"
        },
        {
          "description": "(float, default 1.0) the scale to apply.",
          "name": "scale",
          "required": false,
          "type": "float"
        }
      ],
      "doc": "Scale and bias the input image. Bias values are stored in \nthe same ordering as the image pixel format.",
      "inputs": [
        {
          "description": "Input tensor of shape [N,C,H,W]",
          "name": "input",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result, has same shape and type as input",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "MeanVarianceNormalization",
    "schema": {
      "attributes": [
        {
          "description": "If 1, mean and variance are computed across channels. Default is 0.",
          "name": "across_channels",
          "required": false,
          "type": "int"
        },
        {
          "description": "If 0, normalize the mean only.  Default is 1.",
          "name": "normalize_variance",
          "required": false,
          "type": "int"
        }
      ],
      "doc": "Perform mean variance normalization.",
      "inputs": [
        {
          "description": "Input tensor of shape [N,C,H,W]",
          "name": "input",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Result, has same shape and type as input",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "ParametricSoftplus",
    "schema": {
      "attributes": [
        {
          "description": "Value of alpha",
          "name": "alpha",
          "required": false,
          "type": "float"
        },
        {
          "description": "Value of beta",
          "name": "beta",
          "required": false,
          "type": "float"
        }
      ],
      "doc": "ParametricSoftplus takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the softplus function, y = alpha * ln(exp(beta * x) + 1), is applied to\nthe tensor elementwise.\n",
      "inputs": [
        {
          "description": "1D input tensor",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "1D input tensor",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "ResizeNearest",
    "schema": {
      "attributes": [
        {
          "description": "The scale along height dimension",
          "name": "height_scale",
          "required": true,
          "type": "float"
        },
        {
          "description": "The scale along width dimension",
          "name": "width_scale",
          "required": true,
          "type": "float"
        }
      ],
      "doc": "Resize the width and height dimensions:\noutput_width = floor(input_width * width_scale),\noutput_height = floor(input_height * height_scale).\nFor example:\nX = [[[[1, 2],[3, 4]]]],\nwidth_scale = 2,\nheight_scale = 2,\nY = [[[[1, 1, 2, 2], [1, 1, 2, 2], [3, 3, 4, 4], [3, 3, 4, 4]]]]\n",
      "inputs": [
        {
          "description": "4-D tensor, [N,C,H,W]",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(bool)",
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)",
            "tensor(int32)",
            "tensor(int64)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "4-D tensor after resizing, [N,C,H,W]",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(bool)",
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)",
            "tensor(int32)",
            "tensor(int64)"
          ]
        }
      ],
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(bool)",
            "tensor(int32)",
            "tensor(int64)",
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain output types to bool, int32, int64, float16, float, double tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "Scale",
    "schema": {
      "attributes": [
        {
          "description": "(float, default 1.0) the scale to apply.",
          "name": "scale",
          "required": false,
          "type": "float"
        }
      ],
      "doc": "Scale takes one input data (Tensor<float>) and produces one output data\n(Tensor<float>) whose value is the input data tensor scaled element-wise.\n",
      "inputs": [
        {
          "description": "Input data to be scaled",
          "name": "input",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output data after scaling",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "ScaledTanh",
    "schema": {
      "attributes": [
        {
          "description": "Scale for tanh",
          "name": "scale",
          "required": false,
          "type": "float"
        }
      ],
      "doc": "Calculates the scaled hyperbolic tangent of the given input tensor element-wise,\nscale * tanh(x). This operation can be done in an in-place fashion too,\nby providing the same input and output blobs.\n    ",
      "inputs": [
        {
          "description": "1-D input tensor",
          "name": "input",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "The scaled hyperbolic tangent values of the input tensor computed element-wise",
          "name": "output",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  },
  {
    "op_type": "ThresholdedRelu",
    "schema": {
      "attributes": [
        {
          "description": "Threshold value",
          "name": "theta",
          "required": false,
          "type": "float"
        }
      ],
      "doc": "ThresholdedRelu takes one input data (Tensor<T>) and produces one output data\n(Tensor<T>) where the rectified linear function, y = x for x > theta, y = 0 otherwise,\nis applied to the tensor elementwise.\n",
      "inputs": [
        {
          "description": "Input tensor",
          "name": "X",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "max_input": 1,
      "max_output": 1,
      "min_input": 1,
      "min_output": 1,
      "outputs": [
        {
          "description": "Output tensor",
          "name": "Y",
          "optional": false,
          "typeStr": "T",
          "types": [
            "tensor(double)",
            "tensor(float)",
            "tensor(float16)"
          ]
        }
      ],
      "support_level": "experimental",
      "type_constraints": [
        {
          "allowed_type_strs": [
            "tensor(float16)",
            "tensor(float)",
            "tensor(double)"
          ],
          "description": "Constrain input and output types to float tensors.",
          "type_param_str": "T"
        }
      ]
    }
  }
]
