[tool.mypy]
follow_imports = "slient"
strict_optional = true
warn_return_any = true
warn_no_return = true
# TODO warn_unused_ignores = true
warn_redundant_casts = true
warn_incomplete_stub = true
# TODO disallow_untyped_calls = true
check_untyped_defs = true
# Allow bare generics like np.ndarray
disallow_any_generics = false
no_implicit_optional = true
# TODO disallow_incomplete_defs = true
# TODO disallow_subclassing_any = true
warn_unused_configs = true
show_error_codes = true
show_column_numbers = true
ignore_missing_imports = true
# NOTE: Do not grow the exclude list. Edit .lintrunner.toml instead
exclude = [
    '^third_party',
]

# NOTE: Avoid adding overrides unless for exceptional cases. Prefer inline ignores.
# If you must ignore error for the whole file, consider adapting the example
# `# mypy: disable-error-code="misc,arg-type,type-arg"`
# and put this comment on the top of the file.
[[tool.mypy.overrides]]
module = [
    'onnx.onnx_data_pb',
    'onnx.onnx_data_pb2',
    'onnx.onnx_pb',
    'onnx.onnx_pb2',
    'onnx.onnx_ml_pb2',
    'onnx.onnx_operators_pb',
    'onnx.onnx_operators_ml_pb2',
]
ignore_errors = true

[tool.black]
# NOTE: Do not create an exclude list. Edit .lintrunner.toml instead
target-version = ["py38", "py39", "py310", "py311"]

[tool.isort]
# NOTE: Do not create an exclude list. Edit .lintrunner.toml instead
profile = "black"

[tool.pylint.message_control]
# This list is for vscode. Add new disables in pyproject_pylint.toml for lintrunner and CI.
# Exclude patterns should be modified in .lintrunner.toml
disable = [
    "format",
    "import-error",
    "line-too-long",
    "no-name-in-module",
    "use-dict-literal",     # Dict literals are sometimes preferable when creating kwargs
    "useless-return",
]

[tool.ruff]
# NOTE: Do not create an exclude list. Edit .lintrunner.toml instead
target-version = "py38"
select = [
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "E", # pycodestyle
    "F", # Pyflakes
    "G", # flake8-logging-format
    "ISC", # flake8-implicit-str-concat
    "N", # pep8-naming
    "NPY", # modern numpy
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
    "TID252", # Relative imports
    "UP", # pyupgrade
    "W", # pycodestyle
    "YTT", # flake8-2020
]
# NOTE: Refrain from growing the ignore list unless for exceptional cases.
# Always include a comment to explain why.
ignore = [
    "E501", # Line length controlled by black
    "N803", # Argument casing
    "N806", # Relax: Variable name in function should be lowercase
    "N999", # Module names
    "NPY002", # np.random.Generator may not be preferred in all cases
    "SIM102", # We don't perfer always combining if branches
    "SIM108", # We don't encourage ternary operators
    "SIM114", # Don't combine if branches for debugability
    "SIM116", # Don't use dict lookup to replace if-else
]
ignore-init-module-imports = true
unfixable = [
    "SIM112", # Envvars should not be modified
]

[tool.ruff.flake8-tidy-imports]
# Disallow all relative imports.
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# NOTE: Refrain from growing the ignore list unless for exceptional cases.
# Prefer inline ignores with `noqa: xxx`.
# Eventually this list should become empty.
"**/*_test*" = ["N802"] # Function casing
"onnx/backend/test/case/**" = ["N802"] # Function casing
"onnx/reference/ops/**" = ["N801"] # Class casing
"onnx/reference/ops/_op_list.py" = ["F401"]
"onnx/__init__.py" = ["F401"]
"onnx/reference/__init__.py" = ["F401"]
"onnx/reference/ops/__init__.py" = ["F401"]
"onnx/reference/ops/aionnxml/_op_list.py" = ["F401"]
"onnx/reference/ops/aionnxml/__init__.py" = ["F401"]
"onnx/reference/ops/aionnx_preview_training/__init__.py" = ["F401"]
"onnx/reference/ops/aionnx_preview_training/_op_list.py" = ["F401"]
"onnx/reference/ops/experimental/__init__.py" = ["F401"]
"onnx/test/reference_evaluator_test.py"= ["C408"]  # dict(...) -> { ... }
"onnx/onnx_cpp2py_export/defs.pyi" = ["N802"]
