trigger:
- main

jobs:
- job: 'Test'
  pool:
    vmImage: 'Ubuntu-18.04'
  strategy:
    matrix:
      py39-ml-debug:
        python.version: '3.9'
        onnx_ml: 1
        onnx_debug: 1
        onnx_lite: 0
      py38:
        python.version: '3.8'
        onnx_ml: 0
        onnx_debug: 0
        onnx_lite: 1
      py38-ml:
        python.version: '3.8'
        onnx_ml: 1
        onnx_debug: 0
        onnx_lite: 1
      py37:
        python.version: '3.7'
        onnx_ml: 0
        onnx_debug: 0
        onnx_lite: 1
      py37-ml:
        python.version: '3.7'
        onnx_ml: 1
        onnx_debug: 0
        onnx_lite: 1
    maxParallel: 6

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      addToPath: true

  - script: |
      python -m pip -q install virtualenv
      python -m virtualenv py$(python.version)
      source py$(python.version)/bin/activate

      source workflow_scripts/protobuf/build_protobuf_unix.sh $(nproc)

      python -m pip install -q --upgrade pip
      python -m pip install -q -r requirements-release.txt

      sudo apt-get install -qq -o=Dpkg::Use-Pty=0 -y --no-install-recommends dos2unix
      git submodule update --init --recursive
      export ONNX_BUILD_TESTS=1
      if [ '$(onnx_debug)' == '1' ]; then
        export DEBUG=1
      fi
      if [ '$(onnx_ml)' == '1' ]; then
        export ONNX_ML=1
      fi
      export CMAKE_ARGS="-DONNXIFI_DUMMY_BACKEND=ON -DONNX_WERROR=ON"
      if [ '$(onnx_lite)' == '1' ]; then
        export CMAKE_ARGS="${CMAKE_ARGS} -DONNX_USE_LITE_PROTO=ON"
      fi
      export ONNX_NAMESPACE=ONNX_NAMESPACE_FOO_BAR_FOR_CI
      python setup.py --quiet install
    displayName: 'Install ONNX and dependencies'

  - script: |
      source py$(python.version)/bin/activate

      # style check (flake8 and mypy)
      pip install .[lint]
      bash tools/style.sh
      if [ $? -ne 0 ]; then
        echo "style check failed"
        exit 1
      fi

      # check line endings to be UNIX
      find . -type f -regextype posix-extended -regex '.*\.(py|cpp|md|h|cc|proto|proto3|in)' | xargs dos2unix --quiet
      git status
      git diff --exit-code

      # check auto-gen files up-to-date
      python onnx/defs/gen_doc.py
      python onnx/gen_proto.py -l
      python onnx/gen_proto.py -l --ml
      python onnx/backend/test/stat_coverage.py

      git status
      git diff --exit-code -- . ':(exclude)onnx/onnx-data.proto' ':(exclude)onnx/onnx-data.proto3'
      if [ $? -ne 0 ]; then
        echo "git diff returned failures"
        exit 1
      fi

      # Do not hardcode onnx's namespace in the c++ source code, so that
      # other libraries who statically link with onnx can hide onnx symbols
      # in a private namespace.
      ! grep -R --include='*.cc' --include='*.h' 'namespace onnx' .
      ! grep -R --include='*.cc' --include='*.h' 'onnx::' .

      pytest
      if [ $? -ne 0 ]; then
        echo "pytest failed"
        exit 1
      fi

      # onnx c++ API tests
      export LD_LIBRARY_PATH="./.setuptools-cmake-build/:$LD_LIBRARY_PATH"
      ./.setuptools-cmake-build/onnx_gtests
      if [ $? -ne 0 ]; then
        echo "onnx_gtests failed"
        exit 1
      fi

      ./.setuptools-cmake-build/onnxifi_test_driver_gtests onnx/backend/test/data/node
      if [ $? -ne 0 ]; then
        echo "onnxifi_test_driver_gtests failed"
        exit 1
      fi

      # Mypy only works with our generated _pb.py files when we install in develop mode, so let's do that
      python -m pip uninstall -y onnx
      rm -rf .setuptools-cmake-build
      python -m pip install -q .

    displayName: 'Run ONNX tests'

  - script: |
      source py$(python.version)/bin/activate
      # onnx.checker all existing backend data
      python workflow_scripts/test_generated_backend.py
      # onnx.checker all generated backend data
      python onnx/backend/test/cmd_tools.py generate-data
      python workflow_scripts/test_generated_backend.py

    displayName: Test backend test data
