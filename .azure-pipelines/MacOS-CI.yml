schedules:
- cron: '0 0 * * *'
  displayName: Nightly MacOS CI in main branch
  branches:
    include:
    - main

trigger:
- gh-readonly-queue/**

jobs:
- job: 'Test'
  pool:
    vmImage: 'macOS-11'
  strategy:
    matrix:
      py311-external-protobuf:
        python.version: '3.11'
        onnx_ml: 0
        build_type: 'Release'
        protobuf_type: 'External'
        onnx_lite: 0
      py310-lite-internal-protobuf:
        python.version: '3.10'
        onnx_ml: 0
        build_type: 'Release'
        protobuf_type: 'Internal'
        onnx_lite: 1
      py39-ml-lite-external-protobuf:
        python.version: '3.9'
        onnx_ml: 1
        build_type: 'Release'
        protobuf_type: 'External'
        onnx_lite: 1
      py38-ml-debug-external-protobuf:
        python.version: '3.8'
        onnx_ml: 1
        build_type: 'Debug'
        protobuf_type: 'External'
        onnx_lite: 0
    maxParallel: 4

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'

  - script: |
      # Install Protobuf from source
      export NUM_CORES=`sysctl -n hw.logicalcpu`
      if [ '$(build_type)' == 'Debug' ]; then
        export DEBUG=1
      fi
      if [ '$(protobuf_type)' == 'External' ]; then
        source workflow_scripts/protobuf/build_protobuf_unix.sh $NUM_CORES $(pwd)/protobuf/protobuf_install $(build_type)
      elif [ '$(protobuf_type)' == 'Internal' ]; then
        echo "Use the internal protobuf build"
      fi

      git submodule update --init --recursive
      python -m pip install --upgrade pip
      python -m pip install -r requirements-release.txt

      if [ '$(onnx_ml)' == '1' ]; then
        export ONNX_ML=1
      fi
      export ONNX_BUILD_TESTS=1
      export CMAKE_ARGS="-DONNX_WERROR=ON"
      if [ '$(onnx_lite)' == '1' ]; then
        export CMAKE_ARGS="${CMAKE_ARGS} -DONNX_USE_LITE_PROTO=ON"
      fi
      pip install -e ".[reference]" -v
    displayName: 'Install dependencies and ONNX'

  - script: |
      pytest -n auto --dist loadscope
      if [ $? -ne 0 ]; then
        echo "pytest failed"
        exit 1
      fi

      python -m pip install onnxruntime
      export ORT_MAX_IR_SUPPORTED_VERSION=8
      export ORT_MAX_ML_OPSET_SUPPORTED_VERSION=3
      export ORT_MAX_ONNX_OPSET_SUPPORTED_VERSION=19
      pytest -n auto --dist loadscope
      if [ $? -ne 0 ]; then
        echo "pytest failed when testing onnx with onnxruntime"
        exit 1
      fi

      # onnx c++ API tests
      export LD_LIBRARY_PATH="./.setuptools-cmake-build/:$LD_LIBRARY_PATH"
      ./.setuptools-cmake-build/onnx_gtests
      if [ $? -ne 0 ]; then
        echo "onnx_gtests failed"
        exit 1
      fi

      python onnx/backend/test/cmd_tools.py generate-data --clean
      git status
      git diff --exit-code -- . ':!onnx/onnx-data.proto' ':!onnx/onnx-data.proto3' ':!*output_*.pb' ':!*input_*.pb'
      if [ $? -ne 0 ]; then
        echo "git diff for test generation returned failures. Please check updated node test files"
        exit 1
      fi
      git diff --exit-code --diff-filter=ADR -- . ':!onnx/onnx-data.proto' ':!onnx/onnx-data.proto3'
      if [ $? -ne 0 ]; then
        echo "Test generation returned failures. Please check the number of node test files (input_*.pb or output_*.pb)"
        exit 1
      fi

      pip uninstall -y pillow
      python onnx/backend/test/cmd_tools.py generate-data --clean
      git status
      git diff --exit-code -- . ':!onnx/onnx-data.proto' ':!onnx/onnx-data.proto3' ':!*output_*.pb' ':!*input_*.pb'
      if [ $? -ne 0 ]; then
        echo "git diff for test generation without pillow returned failures. Please check updated node test files"
        exit 1
      fi
      # Internal Protobuf won't have other untrack files like protobuf/
      if [ '$(protobuf_type)' == 'Internal' ]; then
        if [[ $(git ls-files --others --exclude-standard) ]]; then
          echo "Some test-generated files not included in the PR. Did you forget to add any test-generated files?"
          exit 1
        fi
      fi
    displayName: 'Run ONNX Tests'
